// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Access Review History Definition.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class AccessReviewHistoryDefinition : Entity
    {
    
		///<summary>
		/// The AccessReviewHistoryDefinition constructor
		///</summary>
        public AccessReviewHistoryDefinition()
        {
            this.ODataType = "microsoft.graph.accessReviewHistoryDefinition";
        }
	
        /// <summary>
        /// Gets or sets created by.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "createdBy", Required = Newtonsoft.Json.Required.Default)]
        public UserIdentity CreatedBy { get; set; }
    
        /// <summary>
        /// Gets or sets created date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "createdDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? CreatedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets decisions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "decisions", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AccessReviewHistoryDecisionFilter> Decisions { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "displayName", Required = Newtonsoft.Json.Required.Default)]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets download uri.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "downloadUri", Required = Newtonsoft.Json.Required.Default)]
        public string DownloadUri { get; set; }
    
        /// <summary>
        /// Gets or sets fulfilled date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fulfilledDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? FulfilledDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets review history period end date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reviewHistoryPeriodEndDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? ReviewHistoryPeriodEndDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets review history period start date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "reviewHistoryPeriodStartDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? ReviewHistoryPeriodStartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets scopes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "scopes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AccessReviewScope> Scopes { get; set; }
    
        /// <summary>
        /// Gets or sets status.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status", Required = Newtonsoft.Json.Required.Default)]
        public AccessReviewHistoryStatus? Status { get; set; }
    
    }
}

