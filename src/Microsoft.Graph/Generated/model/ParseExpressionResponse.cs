// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type ParseExpressionResponse.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<ParseExpressionResponse>))]
    public partial class ParseExpressionResponse
    {

        /// <summary>
        /// Gets or sets error.
        /// Error details, if expression evaluation resulted in an error.
        /// </summary>
        [JsonPropertyName("error")]
        public PublicError Error { get; set; }
    
        /// <summary>
        /// Gets or sets evaluationResult.
        /// A collection of values produced by the evaluation of the expression.
        /// </summary>
        [JsonPropertyName("evaluationResult")]
        public IEnumerable<string> EvaluationResult { get; set; }
    
        /// <summary>
        /// Gets or sets evaluationSucceeded.
        /// true if the evaluation was successful.
        /// </summary>
        [JsonPropertyName("evaluationSucceeded")]
        public bool? EvaluationSucceeded { get; set; }
    
        /// <summary>
        /// Gets or sets parsedExpression.
        /// An attributeMappingSource object representing the parsed expression.
        /// </summary>
        [JsonPropertyName("parsedExpression")]
        public AttributeMappingSource ParsedExpression { get; set; }
    
        /// <summary>
        /// Gets or sets parsingSucceeded.
        /// true if the expression was parsed successfully.
        /// </summary>
        [JsonPropertyName("parsingSucceeded")]
        public bool? ParsingSucceeded { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
