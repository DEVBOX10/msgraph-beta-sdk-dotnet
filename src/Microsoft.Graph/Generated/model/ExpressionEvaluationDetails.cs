// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type ExpressionEvaluationDetails.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<ExpressionEvaluationDetails>))]
    public partial class ExpressionEvaluationDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpressionEvaluationDetails"/> class.
        /// </summary>
        public ExpressionEvaluationDetails()
        {
            this.ODataType = "microsoft.graph.expressionEvaluationDetails";
        }

        /// <summary>
        /// Gets or sets expression.
        /// Represents expression which has been evaluated.
        /// </summary>
        [JsonPropertyName("expression")]
        public string Expression { get; set; }
    
        /// <summary>
        /// Gets or sets expressionEvaluationDetails.
        /// Represents the details of the evaluation of the expression.
        /// </summary>
        [JsonPropertyName("expressionEvaluationDetails")]
        public IEnumerable<ExpressionEvaluationDetails> ExpressionEvaluationDetailsProperty { get; set; }
    
        /// <summary>
        /// Gets or sets expressionResult.
        /// Represents the value of the result of the current expression.
        /// </summary>
        [JsonPropertyName("expressionResult")]
        public bool? ExpressionResult { get; set; }
    
        /// <summary>
        /// Gets or sets propertyToEvaluate.
        /// Defines the name of the property and the value of that property.
        /// </summary>
        [JsonPropertyName("propertyToEvaluate")]
        public PropertyToEvaluate PropertyToEvaluate { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
