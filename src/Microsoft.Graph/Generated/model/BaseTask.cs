// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Base Task.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<BaseTask>))]
    public partial class BaseTask : Entity
    {
    
        ///<summary>
        /// The internal BaseTask constructor
        ///</summary>
        protected internal BaseTask()
        {
            // Don't allow initialization of abstract entity types
        }
    
        /// <summary>
        /// Gets or sets body last modified date time.
        /// The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
        /// </summary>
        [JsonPropertyName("bodyLastModifiedDateTime")]
        public DateTimeOffset? BodyLastModifiedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets completed date time.
        /// The date when the task was finished.
        /// </summary>
        [JsonPropertyName("completedDateTime")]
        public DateTimeOffset? CompletedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets created date time.
        /// The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
        /// </summary>
        [JsonPropertyName("createdDateTime")]
        public DateTimeOffset? CreatedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// The name of the task.
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets due date time.
        /// The date in the specified time zone that the task is to be finished.
        /// </summary>
        [JsonPropertyName("dueDateTime")]
        public DateTimeTimeZone DueDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets importance.
        /// The importance of the task. Possible values are: low, normal, high.  The possible values are: low, normal, high.
        /// </summary>
        [JsonPropertyName("importance")]
        public Importance? Importance { get; set; }
    
        /// <summary>
        /// Gets or sets last modified date time.
        /// The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
        /// </summary>
        [JsonPropertyName("lastModifiedDateTime")]
        public DateTimeOffset? LastModifiedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets recurrence.
        /// The recurrence pattern for the task.
        /// </summary>
        [JsonPropertyName("recurrence")]
        public PatternedRecurrence Recurrence { get; set; }
    
        /// <summary>
        /// Gets or sets start date time.
        /// The date in the specified time zone when the task is to begin.
        /// </summary>
        [JsonPropertyName("startDateTime")]
        public DateTimeTimeZone StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets status.
        /// Indicates the state or progress of the task. Possible values are: notStarted, inProgress, completed,unknownFutureValue.
        /// </summary>
        [JsonPropertyName("status")]
        public TaskStatus_v2? Status { get; set; }
    
        /// <summary>
        /// Gets or sets text body.
        /// </summary>
        [JsonPropertyName("textBody")]
        public string TextBody { get; set; }
    
        /// <summary>
        /// Gets or sets viewpoint.
        /// </summary>
        [JsonPropertyName("viewpoint")]
        public TaskViewpoint Viewpoint { get; set; }
    
        /// <summary>
        /// Gets or sets checklist items.
        /// A collection of checklistItems linked to a task.
        /// </summary>
        [JsonPropertyName("checklistItems")]
        public IBaseTaskChecklistItemsCollectionPage ChecklistItems { get; set; }

        /// <summary>
        /// Gets or sets checklistItemsNextLink.
        /// </summary>
        [JsonPropertyName("checklistItems@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string ChecklistItemsNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets extensions.
        /// The collection of open extensions defined for the task .
        /// </summary>
        [JsonPropertyName("extensions")]
        public IBaseTaskExtensionsCollectionPage Extensions { get; set; }

        /// <summary>
        /// Gets or sets extensionsNextLink.
        /// </summary>
        [JsonPropertyName("extensions@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string ExtensionsNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets linked resources.
        /// A collection of resources linked to the task.
        /// </summary>
        [JsonPropertyName("linkedResources")]
        public IBaseTaskLinkedResourcesCollectionPage LinkedResources { get; set; }

        /// <summary>
        /// Gets or sets linkedResourcesNextLink.
        /// </summary>
        [JsonPropertyName("linkedResources@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string LinkedResourcesNextLink { get; set; }
    
        /// <summary>
        /// Gets or sets parent list.
        /// The list which contains the task.
        /// </summary>
        [JsonPropertyName("parentList")]
        public BaseTaskList ParentList { get; set; }
    
    }
}

