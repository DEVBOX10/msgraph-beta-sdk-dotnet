// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Windows Update For Business Configuration.
    /// </summary>
    public partial class WindowsUpdateForBusinessConfiguration : DeviceConfiguration
    {
    
		///<summary>
		/// The WindowsUpdateForBusinessConfiguration constructor
		///</summary>
        public WindowsUpdateForBusinessConfiguration()
        {
            this.ODataType = "microsoft.graph.windowsUpdateForBusinessConfiguration";
        }
	
        /// <summary>
        /// Gets or sets automatic update mode.
        /// Automatic update mode. Possible values are: userDefined, notifyDownload, autoInstallAtMaintenanceTime, autoInstallAndRebootAtMaintenanceTime, autoInstallAndRebootAtScheduledTime, autoInstallAndRebootWithoutEndUserControl.
        /// </summary>
        [JsonPropertyName("automaticUpdateMode")]
        public AutomaticUpdateMode? AutomaticUpdateMode { get; set; }
    
        /// <summary>
        /// Gets or sets auto restart notification dismissal.
        /// Specify the method by which the auto-restart required notification is dismissed. Possible values are: notConfigured, automatic, user.
        /// </summary>
        [JsonPropertyName("autoRestartNotificationDismissal")]
        public AutoRestartNotificationDismissalMethod? AutoRestartNotificationDismissal { get; set; }
    
        /// <summary>
        /// Gets or sets business ready updates only.
        /// Determines which branch devices will receive their updates from. Possible values are: userDefined, all, businessReadyOnly, windowsInsiderBuildFast, windowsInsiderBuildSlow, windowsInsiderBuildRelease.
        /// </summary>
        [JsonPropertyName("businessReadyUpdatesOnly")]
        public WindowsUpdateType? BusinessReadyUpdatesOnly { get; set; }
    
        /// <summary>
        /// Gets or sets deadline for feature updates in days.
        /// Number of days before feature updates are installed automatically with valid range from 2 to 30 days
        /// </summary>
        [JsonPropertyName("deadlineForFeatureUpdatesInDays")]
        public Int32? DeadlineForFeatureUpdatesInDays { get; set; }
    
        /// <summary>
        /// Gets or sets deadline for quality updates in days.
        /// Number of days before quality updates are installed automatically with valid range from 2 to 30 days
        /// </summary>
        [JsonPropertyName("deadlineForQualityUpdatesInDays")]
        public Int32? DeadlineForQualityUpdatesInDays { get; set; }
    
        /// <summary>
        /// Gets or sets deadline grace period in days.
        /// Number of days after deadline  until restarts occur automatically with valid range from 0 to 7 days
        /// </summary>
        [JsonPropertyName("deadlineGracePeriodInDays")]
        public Int32? DeadlineGracePeriodInDays { get; set; }
    
        /// <summary>
        /// Gets or sets delivery optimization mode.
        /// Delivery Optimization Mode. Possible values are: userDefined, httpOnly, httpWithPeeringNat, httpWithPeeringPrivateGroup, httpWithInternetPeering, simpleDownload, bypassMode.
        /// </summary>
        [JsonPropertyName("deliveryOptimizationMode")]
        public WindowsDeliveryOptimizationMode? DeliveryOptimizationMode { get; set; }
    
        /// <summary>
        /// Gets or sets drivers excluded.
        /// Exclude Windows update Drivers
        /// </summary>
        [JsonPropertyName("driversExcluded")]
        public bool? DriversExcluded { get; set; }
    
        /// <summary>
        /// Gets or sets engaged restart deadline in days.
        /// Deadline in days before automatically scheduling and executing a pending restart outside of active hours, with valid range from 2 to 30 days
        /// </summary>
        [JsonPropertyName("engagedRestartDeadlineInDays")]
        public Int32? EngagedRestartDeadlineInDays { get; set; }
    
        /// <summary>
        /// Gets or sets engaged restart snooze schedule in days.
        /// Number of days a user can snooze Engaged Restart reminder notifications with valid range from 1 to 3 days
        /// </summary>
        [JsonPropertyName("engagedRestartSnoozeScheduleInDays")]
        public Int32? EngagedRestartSnoozeScheduleInDays { get; set; }
    
        /// <summary>
        /// Gets or sets engaged restart transition schedule in days.
        /// Number of days before transitioning from Auto Restarts scheduled outside of active hours to Engaged Restart, which requires the user to schedule, with valid range from 0 to 30 days
        /// </summary>
        [JsonPropertyName("engagedRestartTransitionScheduleInDays")]
        public Int32? EngagedRestartTransitionScheduleInDays { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates deferral period in days.
        /// Defer Feature Updates by these many days
        /// </summary>
        [JsonPropertyName("featureUpdatesDeferralPeriodInDays")]
        public Int32? FeatureUpdatesDeferralPeriodInDays { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates paused.
        /// Pause Feature Updates
        /// </summary>
        [JsonPropertyName("featureUpdatesPaused")]
        public bool? FeatureUpdatesPaused { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates pause expiry date time.
        /// Feature Updates Pause Expiry datetime
        /// </summary>
        [JsonPropertyName("featureUpdatesPauseExpiryDateTime")]
        public DateTimeOffset? FeatureUpdatesPauseExpiryDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates pause start date.
        /// Feature Updates Pause start date. This property is read-only.
        /// </summary>
        [JsonPropertyName("featureUpdatesPauseStartDate")]
        public Date FeatureUpdatesPauseStartDate { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates rollback start date time.
        /// Feature Updates Rollback Start datetime
        /// </summary>
        [JsonPropertyName("featureUpdatesRollbackStartDateTime")]
        public DateTimeOffset? FeatureUpdatesRollbackStartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates rollback window in days.
        /// The number of days after a Feature Update for which a rollback is valid
        /// </summary>
        [JsonPropertyName("featureUpdatesRollbackWindowInDays")]
        public Int32? FeatureUpdatesRollbackWindowInDays { get; set; }
    
        /// <summary>
        /// Gets or sets feature updates will be rolled back.
        /// Specifies whether to rollback Feature Updates on the next device check in
        /// </summary>
        [JsonPropertyName("featureUpdatesWillBeRolledBack")]
        public bool? FeatureUpdatesWillBeRolledBack { get; set; }
    
        /// <summary>
        /// Gets or sets installation schedule.
        /// Installation schedule
        /// </summary>
        [JsonPropertyName("installationSchedule")]
        public WindowsUpdateInstallScheduleType InstallationSchedule { get; set; }
    
        /// <summary>
        /// Gets or sets microsoft update service allowed.
        /// Allow Microsoft Update Service
        /// </summary>
        [JsonPropertyName("microsoftUpdateServiceAllowed")]
        public bool? MicrosoftUpdateServiceAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets postpone reboot until after deadline.
        /// Specifies if the device should wait until deadline for rebooting outside of active hours
        /// </summary>
        [JsonPropertyName("postponeRebootUntilAfterDeadline")]
        public bool? PostponeRebootUntilAfterDeadline { get; set; }
    
        /// <summary>
        /// Gets or sets prerelease features.
        /// The pre-release features. Possible values are: userDefined, settingsOnly, settingsAndExperimentations, notAllowed.
        /// </summary>
        [JsonPropertyName("prereleaseFeatures")]
        public PrereleaseFeatures? PrereleaseFeatures { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates deferral period in days.
        /// Defer Quality Updates by these many days
        /// </summary>
        [JsonPropertyName("qualityUpdatesDeferralPeriodInDays")]
        public Int32? QualityUpdatesDeferralPeriodInDays { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates paused.
        /// Pause Quality Updates
        /// </summary>
        [JsonPropertyName("qualityUpdatesPaused")]
        public bool? QualityUpdatesPaused { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates pause expiry date time.
        /// Quality Updates Pause Expiry datetime
        /// </summary>
        [JsonPropertyName("qualityUpdatesPauseExpiryDateTime")]
        public DateTimeOffset? QualityUpdatesPauseExpiryDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates pause start date.
        /// Quality Updates Pause start date. This property is read-only.
        /// </summary>
        [JsonPropertyName("qualityUpdatesPauseStartDate")]
        public Date QualityUpdatesPauseStartDate { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates rollback start date time.
        /// Quality Updates Rollback Start datetime
        /// </summary>
        [JsonPropertyName("qualityUpdatesRollbackStartDateTime")]
        public DateTimeOffset? QualityUpdatesRollbackStartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets quality updates will be rolled back.
        /// Specifies whether to rollback Quality Updates on the next device check in
        /// </summary>
        [JsonPropertyName("qualityUpdatesWillBeRolledBack")]
        public bool? QualityUpdatesWillBeRolledBack { get; set; }
    
        /// <summary>
        /// Gets or sets schedule imminent restart warning in minutes.
        /// Specify the period for auto-restart imminent warning notifications. Supported values: 15, 30 or 60 (minutes).
        /// </summary>
        [JsonPropertyName("scheduleImminentRestartWarningInMinutes")]
        public Int32? ScheduleImminentRestartWarningInMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets schedule restart warning in hours.
        /// Specify the period for auto-restart warning reminder notifications. Supported values: 2, 4, 8, 12 or 24 (hours).
        /// </summary>
        [JsonPropertyName("scheduleRestartWarningInHours")]
        public Int32? ScheduleRestartWarningInHours { get; set; }
    
        /// <summary>
        /// Gets or sets skip checks before restart.
        /// Set to skip all check before restart: Battery level = 40%, User presence, Display Needed, Presentation mode, Full screen mode, phone call state, game mode etc.
        /// </summary>
        [JsonPropertyName("skipChecksBeforeRestart")]
        public bool? SkipChecksBeforeRestart { get; set; }
    
        /// <summary>
        /// Gets or sets update notification level.
        /// Specifies what Windows Update notifications users see. Possible values are: notConfigured, defaultNotifications, restartWarningsOnly, disableAllNotifications.
        /// </summary>
        [JsonPropertyName("updateNotificationLevel")]
        public WindowsUpdateNotificationDisplayOption? UpdateNotificationLevel { get; set; }
    
        /// <summary>
        /// Gets or sets update weeks.
        /// Scheduled the update installation on the weeks of the month. Possible values are: userDefined, firstWeek, secondWeek, thirdWeek, fourthWeek, everyWeek.
        /// </summary>
        [JsonPropertyName("updateWeeks")]
        public WindowsUpdateForBusinessUpdateWeeks? UpdateWeeks { get; set; }
    
        /// <summary>
        /// Gets or sets user pause access.
        /// Specifies whether to enable end user’s access to pause software updates. Possible values are: notConfigured, enabled, disabled.
        /// </summary>
        [JsonPropertyName("userPauseAccess")]
        public Enablement? UserPauseAccess { get; set; }
    
        /// <summary>
        /// Gets or sets user windows update scan access.
        /// Specifies whether to disable user’s access to scan Windows Update. Possible values are: notConfigured, enabled, disabled.
        /// </summary>
        [JsonPropertyName("userWindowsUpdateScanAccess")]
        public Enablement? UserWindowsUpdateScanAccess { get; set; }
    
        /// <summary>
        /// Gets or sets device update states.
        /// Windows update for business configuration device states.
        /// </summary>
        [JsonPropertyName("deviceUpdateStates")]
        public IWindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionPage DeviceUpdateStates { get; set; }

        /// <summary>
        /// Gets or sets deviceUpdateStatesNextLink.
        /// </summary>
        [JsonPropertyName("deviceUpdateStates@odata.nextLink")]
        public string DeviceUpdateStatesNextLink { get; set; }
    
    }
}

