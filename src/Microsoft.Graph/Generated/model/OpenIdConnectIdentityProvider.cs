// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Open Id Connect Identity Provider.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class OpenIdConnectIdentityProvider : IdentityProviderBase
    {
    
		///<summary>
		/// The OpenIdConnectIdentityProvider constructor
		///</summary>
        public OpenIdConnectIdentityProvider()
        {
            this.ODataType = "microsoft.graph.openIdConnectIdentityProvider";
        }
	
        /// <summary>
        /// Gets or sets claims mapping.
        /// After the OIDC provider sends an ID token back to Azure AD, Azure AD needs to be able to map the claims from the received token to the claims that Azure AD recognizes and uses. This complex type captures that mapping. Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "claimsMapping", Required = Newtonsoft.Json.Required.Default)]
        public ClaimsMapping ClaimsMapping { get; set; }
    
        /// <summary>
        /// Gets or sets client id.
        /// The client ID for the application obtained when registering the application with the identity provider. Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "clientId", Required = Newtonsoft.Json.Required.Default)]
        public string ClientId { get; set; }
    
        /// <summary>
        /// Gets or sets client secret.
        /// The client secret for the application obtained when registering the application with the identity provider. The clientSecret has a dependency on responseType. When responseType is code, a secret is required for the auth code exchange.When responseType is id_token the secret is not required because there is no code exchange. The id_token is returned directly from the authorization response. This is write-only. A read operation returns '****'.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "clientSecret", Required = Newtonsoft.Json.Required.Default)]
        public string ClientSecret { get; set; }
    
        /// <summary>
        /// Gets or sets domain hint.
        /// The domain hint can be used to skip directly to the sign-in page of the specified identity provider, instead of having the user make a selection among the list of available identity providers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "domainHint", Required = Newtonsoft.Json.Required.Default)]
        public string DomainHint { get; set; }
    
        /// <summary>
        /// Gets or sets metadata url.
        /// The URL for the metadata document of the OpenID Connect identity provider. Every OpenID Connect identity provider describes a metadata document that contains most of the information required to perform sign-in. This includes information such as the URLs to use and the location of the service's public signing keys. The OpenID Connect metadata document is always located at an endpoint that ends in .well-known/openid-configuration. Provide the metadata URL for the OpenID Connect identity provider you add. Read-only. Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "metadataUrl", Required = Newtonsoft.Json.Required.Default)]
        public string MetadataUrl { get; set; }
    
        /// <summary>
        /// Gets or sets response mode.
        /// The response mode defines the method used to send data back from the custom identity provider to Azure AD B2C. Possible values: form_post, query. Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "responseMode", Required = Newtonsoft.Json.Required.Default)]
        public OpenIdConnectResponseMode? ResponseMode { get; set; }
    
        /// <summary>
        /// Gets or sets response type.
        /// The response type describes the type of information sent back in the initial call to the authorization_endpoint of the custom identity provider. Possible values: code , id_token , token.  Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "responseType", Required = Newtonsoft.Json.Required.Default)]
        public OpenIdConnectResponseTypes? ResponseType { get; set; }
    
        /// <summary>
        /// Gets or sets scope.
        /// Scope defines the information and permissions you are looking to gather from your custom identity provider. OpenID Connect requests must contain the openid scope value in order to receive the ID token from the identity provider. Without the ID token, users are not able to sign in to Azure AD B2C using the custom identity provider. Other scopes can be appended, separated by a space. For more details about the scope limitations see RFC6749 Section 3.3. Required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "scope", Required = Newtonsoft.Json.Required.Default)]
        public string Scope { get; set; }
    
    }
}

