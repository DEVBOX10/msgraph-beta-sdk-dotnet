// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Mac OSDevice Features Configuration.
    /// </summary>
    public partial class MacOSDeviceFeaturesConfiguration : AppleDeviceFeaturesConfigurationBase
    {
    
		///<summary>
		/// The MacOSDeviceFeaturesConfiguration constructor
		///</summary>
        public MacOSDeviceFeaturesConfiguration()
        {
            this.ODataType = "microsoft.graph.macOSDeviceFeaturesConfiguration";
        }
	
        /// <summary>
        /// Gets or sets admin show host info.
        /// Whether to show admin host information on the login window.
        /// </summary>
        [JsonPropertyName("adminShowHostInfo")]
        public bool? AdminShowHostInfo { get; set; }
    
        /// <summary>
        /// Gets or sets app associated domains.
        /// Gets or sets a list that maps apps to their associated domains. Application identifiers must be unique. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("appAssociatedDomains")]
        public IEnumerable<MacOSAssociatedDomainsItem> AppAssociatedDomains { get; set; }
    
        /// <summary>
        /// Gets or sets associated domains.
        /// DEPRECATED: use appAssociatedDomains instead. Gets or sets a list that maps apps to their associated domains. The key should match the app's ID, and the value should be a string in the form of 'service:domain' where domain is a fully qualified hostname (e.g. webcredentials:example.com). This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("associatedDomains")]
        public IEnumerable<KeyValuePair> AssociatedDomains { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list hidden.
        /// Whether to show the name and password dialog or a list of users on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListHidden")]
        public bool? AuthorizedUsersListHidden { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list hide admin users.
        /// Whether to hide admin users in the authorized users list on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListHideAdminUsers")]
        public bool? AuthorizedUsersListHideAdminUsers { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list hide local users.
        /// Whether to show only network and system users in the authorized users list on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListHideLocalUsers")]
        public bool? AuthorizedUsersListHideLocalUsers { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list hide mobile accounts.
        /// Whether to hide mobile users in the authorized users list on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListHideMobileAccounts")]
        public bool? AuthorizedUsersListHideMobileAccounts { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list include network users.
        /// Whether to show network users in the authorized users list on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListIncludeNetworkUsers")]
        public bool? AuthorizedUsersListIncludeNetworkUsers { get; set; }
    
        /// <summary>
        /// Gets or sets authorized users list show other managed users.
        /// Whether to show other users in the authorized users list on the login window.
        /// </summary>
        [JsonPropertyName("authorizedUsersListShowOtherManagedUsers")]
        public bool? AuthorizedUsersListShowOtherManagedUsers { get; set; }
    
        /// <summary>
        /// Gets or sets auto launch items.
        /// List of applications, files, folders, and other items to launch when the user logs in. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("autoLaunchItems")]
        public IEnumerable<MacOSLaunchItem> AutoLaunchItems { get; set; }
    
        /// <summary>
        /// Gets or sets console access disabled.
        /// Whether the Other user will disregard use of the `&amp;gt;console&amp;gt; special user name.
        /// </summary>
        [JsonPropertyName("consoleAccessDisabled")]
        public bool? ConsoleAccessDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets content caching block deletion.
        /// Prevents content caches from purging content to free up disk space for other apps.
        /// </summary>
        [JsonPropertyName("contentCachingBlockDeletion")]
        public bool? ContentCachingBlockDeletion { get; set; }
    
        /// <summary>
        /// Gets or sets content caching client listen ranges.
        /// A list of custom IP ranges content caches will use to listen for clients. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("contentCachingClientListenRanges")]
        public IEnumerable<IpRange> ContentCachingClientListenRanges { get; set; }
    
        /// <summary>
        /// Gets or sets content caching client policy.
        /// Determines the method in which content caching servers will listen for clients. Possible values are: notConfigured, clientsInLocalNetwork, clientsWithSamePublicIpAddress, clientsInCustomLocalNetworks, clientsInCustomLocalNetworksWithFallback.
        /// </summary>
        [JsonPropertyName("contentCachingClientPolicy")]
        public MacOSContentCachingClientPolicy? ContentCachingClientPolicy { get; set; }
    
        /// <summary>
        /// Gets or sets content caching data path.
        /// The path to the directory used to store cached content. The value must be (or end with) /Library/Application Support/Apple/AssetCache/Data
        /// </summary>
        [JsonPropertyName("contentCachingDataPath")]
        public string ContentCachingDataPath { get; set; }
    
        /// <summary>
        /// Gets or sets content caching disable connection sharing.
        /// Disables internet connection sharing.
        /// </summary>
        [JsonPropertyName("contentCachingDisableConnectionSharing")]
        public bool? ContentCachingDisableConnectionSharing { get; set; }
    
        /// <summary>
        /// Gets or sets content caching enabled.
        /// Enables content caching and prevents it from being disabled by the user.
        /// </summary>
        [JsonPropertyName("contentCachingEnabled")]
        public bool? ContentCachingEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets content caching force connection sharing.
        /// Forces internet connection sharing. contentCachingDisableConnectionSharing overrides this setting.
        /// </summary>
        [JsonPropertyName("contentCachingForceConnectionSharing")]
        public bool? ContentCachingForceConnectionSharing { get; set; }
    
        /// <summary>
        /// Gets or sets content caching keep awake.
        /// Prevent the device from sleeping if content caching is enabled.
        /// </summary>
        [JsonPropertyName("contentCachingKeepAwake")]
        public bool? ContentCachingKeepAwake { get; set; }
    
        /// <summary>
        /// Gets or sets content caching log client identities.
        /// Enables logging of IP addresses and ports of clients that request cached content.
        /// </summary>
        [JsonPropertyName("contentCachingLogClientIdentities")]
        public bool? ContentCachingLogClientIdentities { get; set; }
    
        /// <summary>
        /// Gets or sets content caching max size bytes.
        /// The maximum number of bytes of disk space that will be used for the content cache. A value of 0 (default) indicates unlimited disk space.
        /// </summary>
        [JsonPropertyName("contentCachingMaxSizeBytes")]
        public Int32? ContentCachingMaxSizeBytes { get; set; }
    
        /// <summary>
        /// Gets or sets content caching parents.
        /// A list of IP addresses representing parent content caches.
        /// </summary>
        [JsonPropertyName("contentCachingParents")]
        public IEnumerable<string> ContentCachingParents { get; set; }
    
        /// <summary>
        /// Gets or sets content caching parent selection policy.
        /// Determines the method in which content caching servers will select parents if multiple are present. Possible values are: notConfigured, roundRobin, firstAvailable, urlPathHash, random, stickyAvailable.
        /// </summary>
        [JsonPropertyName("contentCachingParentSelectionPolicy")]
        public MacOSContentCachingParentSelectionPolicy? ContentCachingParentSelectionPolicy { get; set; }
    
        /// <summary>
        /// Gets or sets content caching peer filter ranges.
        /// A list of custom IP ranges content caches will use to query for content from peers caches. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("contentCachingPeerFilterRanges")]
        public IEnumerable<IpRange> ContentCachingPeerFilterRanges { get; set; }
    
        /// <summary>
        /// Gets or sets content caching peer listen ranges.
        /// A list of custom IP ranges content caches will use to listen for peer caches. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("contentCachingPeerListenRanges")]
        public IEnumerable<IpRange> ContentCachingPeerListenRanges { get; set; }
    
        /// <summary>
        /// Gets or sets content caching peer policy.
        /// Determines the method in which content caches peer with other caches. Possible values are: notConfigured, peersInLocalNetwork, peersWithSamePublicIpAddress, peersInCustomLocalNetworks.
        /// </summary>
        [JsonPropertyName("contentCachingPeerPolicy")]
        public MacOSContentCachingPeerPolicy? ContentCachingPeerPolicy { get; set; }
    
        /// <summary>
        /// Gets or sets content caching port.
        /// Sets the port used for content caching. If the value is 0, a random available port will be selected. Valid values 0 to 65535
        /// </summary>
        [JsonPropertyName("contentCachingPort")]
        public Int32? ContentCachingPort { get; set; }
    
        /// <summary>
        /// Gets or sets content caching public ranges.
        /// A list of custom IP ranges that Apple's content caching service should use to match clients to content caches. This collection can contain a maximum of 500 elements.
        /// </summary>
        [JsonPropertyName("contentCachingPublicRanges")]
        public IEnumerable<IpRange> ContentCachingPublicRanges { get; set; }
    
        /// <summary>
        /// Gets or sets content caching show alerts.
        /// Display content caching alerts as system notifications.
        /// </summary>
        [JsonPropertyName("contentCachingShowAlerts")]
        public bool? ContentCachingShowAlerts { get; set; }
    
        /// <summary>
        /// Gets or sets content caching type.
        /// Determines what type of content is allowed to be cached by Apple's content caching service. Possible values are: notConfigured, userContentOnly, sharedContentOnly.
        /// </summary>
        [JsonPropertyName("contentCachingType")]
        public MacOSContentCachingType? ContentCachingType { get; set; }
    
        /// <summary>
        /// Gets or sets login window text.
        /// Custom text to be displayed on the login window.
        /// </summary>
        [JsonPropertyName("loginWindowText")]
        public string LoginWindowText { get; set; }
    
        /// <summary>
        /// Gets or sets log out disabled while logged in.
        /// Whether the Log Out menu item on the login window will be disabled while the user is logged in.
        /// </summary>
        [JsonPropertyName("logOutDisabledWhileLoggedIn")]
        public bool? LogOutDisabledWhileLoggedIn { get; set; }
    
        /// <summary>
        /// Gets or sets mac ossingle sign on extension.
        /// Gets or sets a single sign-on extension profile.
        /// </summary>
        [JsonPropertyName("macOSSingleSignOnExtension")]
        public MacOSSingleSignOnExtension MacOSSingleSignOnExtension { get; set; }
    
        /// <summary>
        /// Gets or sets power off disabled while logged in.
        /// Whether the Power Off menu item on the login window will be disabled while the user is logged in.
        /// </summary>
        [JsonPropertyName("powerOffDisabledWhileLoggedIn")]
        public bool? PowerOffDisabledWhileLoggedIn { get; set; }
    
        /// <summary>
        /// Gets or sets restart disabled.
        /// Whether to hide the Restart button item on the login window.
        /// </summary>
        [JsonPropertyName("restartDisabled")]
        public bool? RestartDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets restart disabled while logged in.
        /// Whether the Restart menu item on the login window will be disabled while the user is logged in.
        /// </summary>
        [JsonPropertyName("restartDisabledWhileLoggedIn")]
        public bool? RestartDisabledWhileLoggedIn { get; set; }
    
        /// <summary>
        /// Gets or sets screen lock disable immediate.
        /// Whether to disable the immediate screen lock functions.
        /// </summary>
        [JsonPropertyName("screenLockDisableImmediate")]
        public bool? ScreenLockDisableImmediate { get; set; }
    
        /// <summary>
        /// Gets or sets shut down disabled.
        /// Whether to hide the Shut Down button item on the login window.
        /// </summary>
        [JsonPropertyName("shutDownDisabled")]
        public bool? ShutDownDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets shut down disabled while logged in.
        /// Whether the Shut Down menu item on the login window will be disabled while the user is logged in.
        /// </summary>
        [JsonPropertyName("shutDownDisabledWhileLoggedIn")]
        public bool? ShutDownDisabledWhileLoggedIn { get; set; }
    
        /// <summary>
        /// Gets or sets single sign on extension.
        /// Gets or sets a single sign-on extension profile. Deprecated: use MacOSSingleSignOnExtension instead.
        /// </summary>
        [JsonPropertyName("singleSignOnExtension")]
        public SingleSignOnExtension SingleSignOnExtension { get; set; }
    
        /// <summary>
        /// Gets or sets sleep disabled.
        /// Whether to hide the Sleep menu item on the login window.
        /// </summary>
        [JsonPropertyName("sleepDisabled")]
        public bool? SleepDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets single sign on extension pkinit certificate.
        /// PKINIT Certificate for the authentication with single sign-on extensions.
        /// </summary>
        [JsonPropertyName("singleSignOnExtensionPkinitCertificate")]
        public MacOSCertificateProfileBase SingleSignOnExtensionPkinitCertificate { get; set; }
    
    }
}

