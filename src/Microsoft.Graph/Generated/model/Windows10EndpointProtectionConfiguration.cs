// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Windows10Endpoint Protection Configuration.
    /// </summary>
    public partial class Windows10EndpointProtectionConfiguration : DeviceConfiguration
    {
    
		///<summary>
		/// The Windows10EndpointProtectionConfiguration constructor
		///</summary>
        public Windows10EndpointProtectionConfiguration()
        {
            this.ODataType = "microsoft.graph.windows10EndpointProtectionConfiguration";
        }
	
        /// <summary>
        /// Gets or sets application guard allow file save on host.
        /// Allow users to download files from Edge in the application guard container and save them on the host file system
        /// </summary>
        [JsonPropertyName("applicationGuardAllowFileSaveOnHost")]
        public bool? ApplicationGuardAllowFileSaveOnHost { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow persistence.
        /// Allow persisting user generated data inside the App Guard Containter (favorites, cookies, web passwords, etc.)
        /// </summary>
        [JsonPropertyName("applicationGuardAllowPersistence")]
        public bool? ApplicationGuardAllowPersistence { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow print to local printers.
        /// Allow printing to Local Printers from Container
        /// </summary>
        [JsonPropertyName("applicationGuardAllowPrintToLocalPrinters")]
        public bool? ApplicationGuardAllowPrintToLocalPrinters { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow print to network printers.
        /// Allow printing to Network Printers from Container
        /// </summary>
        [JsonPropertyName("applicationGuardAllowPrintToNetworkPrinters")]
        public bool? ApplicationGuardAllowPrintToNetworkPrinters { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow print to pdf.
        /// Allow printing to PDF from Container
        /// </summary>
        [JsonPropertyName("applicationGuardAllowPrintToPDF")]
        public bool? ApplicationGuardAllowPrintToPDF { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow print to xps.
        /// Allow printing to XPS from Container
        /// </summary>
        [JsonPropertyName("applicationGuardAllowPrintToXPS")]
        public bool? ApplicationGuardAllowPrintToXPS { get; set; }
    
        /// <summary>
        /// Gets or sets application guard allow virtual gpu.
        /// Allow application guard to use virtual GPU
        /// </summary>
        [JsonPropertyName("applicationGuardAllowVirtualGPU")]
        public bool? ApplicationGuardAllowVirtualGPU { get; set; }
    
        /// <summary>
        /// Gets or sets application guard block clipboard sharing.
        /// Block clipboard to share data from Host to Container, or from Container to Host, or both ways, or neither ways. Possible values are: notConfigured, blockBoth, blockHostToContainer, blockContainerToHost, blockNone.
        /// </summary>
        [JsonPropertyName("applicationGuardBlockClipboardSharing")]
        public ApplicationGuardBlockClipboardSharingType? ApplicationGuardBlockClipboardSharing { get; set; }
    
        /// <summary>
        /// Gets or sets application guard block file transfer.
        /// Block clipboard to transfer image file, text file or neither of them. Possible values are: notConfigured, blockImageAndTextFile, blockImageFile, blockNone, blockTextFile.
        /// </summary>
        [JsonPropertyName("applicationGuardBlockFileTransfer")]
        public ApplicationGuardBlockFileTransferType? ApplicationGuardBlockFileTransfer { get; set; }
    
        /// <summary>
        /// Gets or sets application guard block non enterprise content.
        /// Block enterprise sites to load non-enterprise content, such as third party plug-ins
        /// </summary>
        [JsonPropertyName("applicationGuardBlockNonEnterpriseContent")]
        public bool? ApplicationGuardBlockNonEnterpriseContent { get; set; }
    
        /// <summary>
        /// Gets or sets application guard enabled.
        /// Enable Windows Defender Application Guard
        /// </summary>
        [JsonPropertyName("applicationGuardEnabled")]
        public bool? ApplicationGuardEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets application guard enabled options.
        /// Enable Windows Defender Application Guard for newer Windows builds. Possible values are: notConfigured, enabledForEdge, enabledForOffice, enabledForEdgeAndOffice.
        /// </summary>
        [JsonPropertyName("applicationGuardEnabledOptions")]
        public ApplicationGuardEnabledOptions? ApplicationGuardEnabledOptions { get; set; }
    
        /// <summary>
        /// Gets or sets application guard force auditing.
        /// Force auditing will persist Windows logs and events to meet security/compliance criteria (sample events are user login-logoff, use of privilege rights, software installation, system changes, etc.)
        /// </summary>
        [JsonPropertyName("applicationGuardForceAuditing")]
        public bool? ApplicationGuardForceAuditing { get; set; }
    
        /// <summary>
        /// Gets or sets app locker application control.
        /// Enables the Admin to choose what types of app to allow on devices. Possible values are: notConfigured, enforceComponentsAndStoreApps, auditComponentsAndStoreApps, enforceComponentsStoreAppsAndSmartlocker, auditComponentsStoreAppsAndSmartlocker.
        /// </summary>
        [JsonPropertyName("appLockerApplicationControl")]
        public AppLockerApplicationControlType? AppLockerApplicationControl { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker allow standard user encryption.
        /// Allows the admin to allow standard users to enable encrpytion during Azure AD Join.
        /// </summary>
        [JsonPropertyName("bitLockerAllowStandardUserEncryption")]
        public bool? BitLockerAllowStandardUserEncryption { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker disable warning for other disk encryption.
        /// Allows the Admin to disable the warning prompt for other disk encryption on the user machines.
        /// </summary>
        [JsonPropertyName("bitLockerDisableWarningForOtherDiskEncryption")]
        public bool? BitLockerDisableWarningForOtherDiskEncryption { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker enable storage card encryption on mobile.
        /// Allows the admin to require encryption to be turned on using BitLocker. This policy is valid only for a mobile SKU.
        /// </summary>
        [JsonPropertyName("bitLockerEnableStorageCardEncryptionOnMobile")]
        public bool? BitLockerEnableStorageCardEncryptionOnMobile { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker encrypt device.
        /// Allows the admin to require encryption to be turned on using BitLocker.
        /// </summary>
        [JsonPropertyName("bitLockerEncryptDevice")]
        public bool? BitLockerEncryptDevice { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker fixed drive policy.
        /// BitLocker Fixed Drive Policy.
        /// </summary>
        [JsonPropertyName("bitLockerFixedDrivePolicy")]
        public BitLockerFixedDrivePolicy BitLockerFixedDrivePolicy { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker recovery password rotation.
        /// This setting initiates a client-driven recovery password rotation after an OS drive recovery (either by using bootmgr or WinRE). Possible values are: notConfigured, disabled, enabledForAzureAd, enabledForAzureAdAndHybrid.
        /// </summary>
        [JsonPropertyName("bitLockerRecoveryPasswordRotation")]
        public BitLockerRecoveryPasswordRotationType? BitLockerRecoveryPasswordRotation { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker removable drive policy.
        /// BitLocker Removable Drive Policy.
        /// </summary>
        [JsonPropertyName("bitLockerRemovableDrivePolicy")]
        public BitLockerRemovableDrivePolicy BitLockerRemovableDrivePolicy { get; set; }
    
        /// <summary>
        /// Gets or sets bit locker system drive policy.
        /// BitLocker System Drive Policy.
        /// </summary>
        [JsonPropertyName("bitLockerSystemDrivePolicy")]
        public BitLockerSystemDrivePolicy BitLockerSystemDrivePolicy { get; set; }
    
        /// <summary>
        /// Gets or sets defender additional guarded folders.
        /// List of folder paths to be added to the list of protected folders
        /// </summary>
        [JsonPropertyName("defenderAdditionalGuardedFolders")]
        public IEnumerable<string> DefenderAdditionalGuardedFolders { get; set; }
    
        /// <summary>
        /// Gets or sets defender adobe reader launch child process.
        /// Value indicating the behavior of Adobe Reader from creating child processes. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderAdobeReaderLaunchChildProcess")]
        public DefenderProtectionType? DefenderAdobeReaderLaunchChildProcess { get; set; }
    
        /// <summary>
        /// Gets or sets defender advanced ransomeware protection type.
        /// Value indicating use of advanced protection against ransomeware. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderAdvancedRansomewareProtectionType")]
        public DefenderProtectionType? DefenderAdvancedRansomewareProtectionType { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow behavior monitoring.
        /// Allows or disallows Windows Defender Behavior Monitoring functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowBehaviorMonitoring")]
        public bool? DefenderAllowBehaviorMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow cloud protection.
        /// To best protect your PC, Windows Defender will send information to Microsoft about any problems it finds. Microsoft will analyze that information, learn more about problems affecting you and other customers, and offer improved solutions.
        /// </summary>
        [JsonPropertyName("defenderAllowCloudProtection")]
        public bool? DefenderAllowCloudProtection { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow end user access.
        /// Allows or disallows user access to the Windows Defender UI. If disallowed, all Windows Defender notifications will also be suppressed.
        /// </summary>
        [JsonPropertyName("defenderAllowEndUserAccess")]
        public bool? DefenderAllowEndUserAccess { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow intrusion prevention system.
        /// Allows or disallows Windows Defender Intrusion Prevention functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowIntrusionPreventionSystem")]
        public bool? DefenderAllowIntrusionPreventionSystem { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow on access protection.
        /// Allows or disallows Windows Defender On Access Protection functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowOnAccessProtection")]
        public bool? DefenderAllowOnAccessProtection { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow real time monitoring.
        /// Allows or disallows Windows Defender Realtime Monitoring functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowRealTimeMonitoring")]
        public bool? DefenderAllowRealTimeMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow scan archive files.
        /// Allows or disallows scanning of archives.
        /// </summary>
        [JsonPropertyName("defenderAllowScanArchiveFiles")]
        public bool? DefenderAllowScanArchiveFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow scan downloads.
        /// Allows or disallows Windows Defender IOAVP Protection functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowScanDownloads")]
        public bool? DefenderAllowScanDownloads { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow scan network files.
        /// Allows or disallows a scanning of network files.
        /// </summary>
        [JsonPropertyName("defenderAllowScanNetworkFiles")]
        public bool? DefenderAllowScanNetworkFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow scan removable drives during full scan.
        /// Allows or disallows a full scan of removable drives. During a quick scan, removable drives may still be scanned.
        /// </summary>
        [JsonPropertyName("defenderAllowScanRemovableDrivesDuringFullScan")]
        public bool? DefenderAllowScanRemovableDrivesDuringFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender allow scan scripts loaded in internet explorer.
        /// Allows or disallows Windows Defender Script Scanning functionality.
        /// </summary>
        [JsonPropertyName("defenderAllowScanScriptsLoadedInInternetExplorer")]
        public bool? DefenderAllowScanScriptsLoadedInInternetExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets defender attack surface reduction excluded paths.
        /// List of exe files and folders to be excluded from attack surface reduction rules
        /// </summary>
        [JsonPropertyName("defenderAttackSurfaceReductionExcludedPaths")]
        public IEnumerable<string> DefenderAttackSurfaceReductionExcludedPaths { get; set; }
    
        /// <summary>
        /// Gets or sets defender block end user access.
        /// Allows or disallows user access to the Windows Defender UI. If disallowed, all Windows Defender notifications will also be suppressed.
        /// </summary>
        [JsonPropertyName("defenderBlockEndUserAccess")]
        public bool? DefenderBlockEndUserAccess { get; set; }
    
        /// <summary>
        /// Gets or sets defender check for signatures before running scan.
        /// This policy setting allows you to manage whether a check for new virus and spyware definitions will occur before running a scan.
        /// </summary>
        [JsonPropertyName("defenderCheckForSignaturesBeforeRunningScan")]
        public bool? DefenderCheckForSignaturesBeforeRunningScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender cloud block level.
        /// Added in Windows 10, version 1709. This policy setting determines how aggressive Windows Defender Antivirus will be in blocking and scanning suspicious files. Value type is integer. This feature requires the 'Join Microsoft MAPS' setting enabled in order to function. Possible values are: notConfigured, high, highPlus, zeroTolerance.
        /// </summary>
        [JsonPropertyName("defenderCloudBlockLevel")]
        public DefenderCloudBlockLevelType? DefenderCloudBlockLevel { get; set; }
    
        /// <summary>
        /// Gets or sets defender cloud extended timeout in seconds.
        /// Added in Windows 10, version 1709. This feature allows Windows Defender Antivirus to block a suspicious file for up to 60 seconds, and scan it in the cloud to make sure it's safe. Value type is integer, range is 0 - 50. This feature depends on three other MAPS settings the must all be enabled- 'Configure the 'Block at First Sight' feature; 'Join Microsoft MAPS'; 'Send file samples when further analysis is required'. Valid values 0 to 50
        /// </summary>
        [JsonPropertyName("defenderCloudExtendedTimeoutInSeconds")]
        public Int32? DefenderCloudExtendedTimeoutInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets defender days before deleting quarantined malware.
        /// Time period (in days) that quarantine items will be stored on the system. Valid values 0 to 90
        /// </summary>
        [JsonPropertyName("defenderDaysBeforeDeletingQuarantinedMalware")]
        public Int32? DefenderDaysBeforeDeletingQuarantinedMalware { get; set; }
    
        /// <summary>
        /// Gets or sets defender detected malware actions.
        /// Allows an administrator to specify any valid threat severity levels and the corresponding default action ID to take.
        /// </summary>
        [JsonPropertyName("defenderDetectedMalwareActions")]
        public DefenderDetectedMalwareActions DefenderDetectedMalwareActions { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable behavior monitoring.
        /// Allows or disallows Windows Defender Behavior Monitoring functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableBehaviorMonitoring")]
        public bool? DefenderDisableBehaviorMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable catchup full scan.
        /// This policy setting allows you to configure catch-up scans for scheduled full scans. A catch-up scan is a scan that is initiated because a regularly scheduled scan was missed. Usually these scheduled scans are missed because the computer was turned off at the scheduled time.
        /// </summary>
        [JsonPropertyName("defenderDisableCatchupFullScan")]
        public bool? DefenderDisableCatchupFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable catchup quick scan.
        /// This policy setting allows you to configure catch-up scans for scheduled quick scans. A catch-up scan is a scan that is initiated because a regularly scheduled scan was missed. Usually these scheduled scans are missed because the computer was turned off at the scheduled time.
        /// </summary>
        [JsonPropertyName("defenderDisableCatchupQuickScan")]
        public bool? DefenderDisableCatchupQuickScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable cloud protection.
        /// To best protect your PC, Windows Defender will send information to Microsoft about any problems it finds. Microsoft will analyze that information, learn more about problems affecting you and other customers, and offer improved solutions.
        /// </summary>
        [JsonPropertyName("defenderDisableCloudProtection")]
        public bool? DefenderDisableCloudProtection { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable intrusion prevention system.
        /// Allows or disallows Windows Defender Intrusion Prevention functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableIntrusionPreventionSystem")]
        public bool? DefenderDisableIntrusionPreventionSystem { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable on access protection.
        /// Allows or disallows Windows Defender On Access Protection functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableOnAccessProtection")]
        public bool? DefenderDisableOnAccessProtection { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable real time monitoring.
        /// Allows or disallows Windows Defender Realtime Monitoring functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableRealTimeMonitoring")]
        public bool? DefenderDisableRealTimeMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable scan archive files.
        /// Allows or disallows scanning of archives.
        /// </summary>
        [JsonPropertyName("defenderDisableScanArchiveFiles")]
        public bool? DefenderDisableScanArchiveFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable scan downloads.
        /// Allows or disallows Windows Defender IOAVP Protection functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableScanDownloads")]
        public bool? DefenderDisableScanDownloads { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable scan network files.
        /// Allows or disallows a scanning of network files.
        /// </summary>
        [JsonPropertyName("defenderDisableScanNetworkFiles")]
        public bool? DefenderDisableScanNetworkFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable scan removable drives during full scan.
        /// Allows or disallows a full scan of removable drives. During a quick scan, removable drives may still be scanned.
        /// </summary>
        [JsonPropertyName("defenderDisableScanRemovableDrivesDuringFullScan")]
        public bool? DefenderDisableScanRemovableDrivesDuringFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender disable scan scripts loaded in internet explorer.
        /// Allows or disallows Windows Defender Script Scanning functionality.
        /// </summary>
        [JsonPropertyName("defenderDisableScanScriptsLoadedInInternetExplorer")]
        public bool? DefenderDisableScanScriptsLoadedInInternetExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets defender email content execution.
        /// Value indicating if execution of executable content (exe, dll, ps, js, vbs, etc) should be dropped from email (webmail/mail-client). Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderEmailContentExecution")]
        public DefenderProtectionType? DefenderEmailContentExecution { get; set; }
    
        /// <summary>
        /// Gets or sets defender email content execution type.
        /// Value indicating if execution of executable content (exe, dll, ps, js, vbs, etc) should be dropped from email (webmail/mail-client). Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderEmailContentExecutionType")]
        public DefenderAttackSurfaceType? DefenderEmailContentExecutionType { get; set; }
    
        /// <summary>
        /// Gets or sets defender enable low cpu priority.
        /// This policy setting allows you to enable or disable low CPU priority for scheduled scans.
        /// </summary>
        [JsonPropertyName("defenderEnableLowCpuPriority")]
        public bool? DefenderEnableLowCpuPriority { get; set; }
    
        /// <summary>
        /// Gets or sets defender enable scan incoming mail.
        /// Allows or disallows scanning of email.
        /// </summary>
        [JsonPropertyName("defenderEnableScanIncomingMail")]
        public bool? DefenderEnableScanIncomingMail { get; set; }
    
        /// <summary>
        /// Gets or sets defender enable scan mapped network drives during full scan.
        /// Allows or disallows a full scan of mapped network drives.
        /// </summary>
        [JsonPropertyName("defenderEnableScanMappedNetworkDrivesDuringFullScan")]
        public bool? DefenderEnableScanMappedNetworkDrivesDuringFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender exploit protection xml.
        /// Xml content containing information regarding exploit protection details.
        /// </summary>
        [JsonPropertyName("defenderExploitProtectionXml")]
        public byte[] DefenderExploitProtectionXml { get; set; }
    
        /// <summary>
        /// Gets or sets defender exploit protection xml file name.
        /// Name of the file from which DefenderExploitProtectionXml was obtained.
        /// </summary>
        [JsonPropertyName("defenderExploitProtectionXmlFileName")]
        public string DefenderExploitProtectionXmlFileName { get; set; }
    
        /// <summary>
        /// Gets or sets defender file extensions to exclude.
        /// File extensions to exclude from scans and real time protection.
        /// </summary>
        [JsonPropertyName("defenderFileExtensionsToExclude")]
        public IEnumerable<string> DefenderFileExtensionsToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender files and folders to exclude.
        /// Files and folder to exclude from scans and real time protection.
        /// </summary>
        [JsonPropertyName("defenderFilesAndFoldersToExclude")]
        public IEnumerable<string> DefenderFilesAndFoldersToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender guarded folders allowed app paths.
        /// List of paths to exe that are allowed to access protected folders
        /// </summary>
        [JsonPropertyName("defenderGuardedFoldersAllowedAppPaths")]
        public IEnumerable<string> DefenderGuardedFoldersAllowedAppPaths { get; set; }
    
        /// <summary>
        /// Gets or sets defender guard my folders type.
        /// Value indicating the behavior of protected folders. Possible values are: userDefined, enable, auditMode, blockDiskModification, auditDiskModification.
        /// </summary>
        [JsonPropertyName("defenderGuardMyFoldersType")]
        public FolderProtectionType? DefenderGuardMyFoldersType { get; set; }
    
        /// <summary>
        /// Gets or sets defender network protection type.
        /// Value indicating the behavior of NetworkProtection. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderNetworkProtectionType")]
        public DefenderProtectionType? DefenderNetworkProtectionType { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps executable content creation or launch.
        /// Value indicating the behavior of Office applications/macros creating or launching executable content. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsExecutableContentCreationOrLaunch")]
        public DefenderProtectionType? DefenderOfficeAppsExecutableContentCreationOrLaunch { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps executable content creation or launch type.
        /// Value indicating the behavior of Office applications/macros creating or launching executable content. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsExecutableContentCreationOrLaunchType")]
        public DefenderAttackSurfaceType? DefenderOfficeAppsExecutableContentCreationOrLaunchType { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps launch child process.
        /// Value indicating the behavior of Office application launching child processes. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsLaunchChildProcess")]
        public DefenderProtectionType? DefenderOfficeAppsLaunchChildProcess { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps launch child process type.
        /// Value indicating the behavior of Office application launching child processes. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsLaunchChildProcessType")]
        public DefenderAttackSurfaceType? DefenderOfficeAppsLaunchChildProcessType { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps other process injection.
        /// Value indicating the behavior of  Office applications injecting into other processes. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsOtherProcessInjection")]
        public DefenderProtectionType? DefenderOfficeAppsOtherProcessInjection { get; set; }
    
        /// <summary>
        /// Gets or sets defender office apps other process injection type.
        /// Value indicating the behavior of Office applications injecting into other processes. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderOfficeAppsOtherProcessInjectionType")]
        public DefenderAttackSurfaceType? DefenderOfficeAppsOtherProcessInjectionType { get; set; }
    
        /// <summary>
        /// Gets or sets defender office communication apps launch child process.
        /// Value indicating the behavior of Office communication applications, including Microsoft Outlook, from creating child processes. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderOfficeCommunicationAppsLaunchChildProcess")]
        public DefenderProtectionType? DefenderOfficeCommunicationAppsLaunchChildProcess { get; set; }
    
        /// <summary>
        /// Gets or sets defender office macro code allow win32imports.
        /// Value indicating the behavior of Win32 imports from Macro code in Office. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderOfficeMacroCodeAllowWin32Imports")]
        public DefenderProtectionType? DefenderOfficeMacroCodeAllowWin32Imports { get; set; }
    
        /// <summary>
        /// Gets or sets defender office macro code allow win32imports type.
        /// Value indicating the behavior of Win32 imports from Macro code in Office. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderOfficeMacroCodeAllowWin32ImportsType")]
        public DefenderAttackSurfaceType? DefenderOfficeMacroCodeAllowWin32ImportsType { get; set; }
    
        /// <summary>
        /// Gets or sets defender potentially unwanted app action.
        /// Added in Windows 10, version 1607. Specifies the level of detection for potentially unwanted applications (PUAs). Windows Defender alerts you when potentially unwanted software is being downloaded or attempts to install itself on your computer. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderPotentiallyUnwantedAppAction")]
        public DefenderProtectionType? DefenderPotentiallyUnwantedAppAction { get; set; }
    
        /// <summary>
        /// Gets or sets defender prevent credential stealing type.
        /// Value indicating if credential stealing from the Windows local security authority subsystem is permitted. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderPreventCredentialStealingType")]
        public DefenderProtectionType? DefenderPreventCredentialStealingType { get; set; }
    
        /// <summary>
        /// Gets or sets defender process creation.
        /// Value indicating response to process creations originating from PSExec and WMI commands. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderProcessCreation")]
        public DefenderProtectionType? DefenderProcessCreation { get; set; }
    
        /// <summary>
        /// Gets or sets defender process creation type.
        /// Value indicating response to process creations originating from PSExec and WMI commands. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderProcessCreationType")]
        public DefenderAttackSurfaceType? DefenderProcessCreationType { get; set; }
    
        /// <summary>
        /// Gets or sets defender processes to exclude.
        /// Processes to exclude from scans and real time protection.
        /// </summary>
        [JsonPropertyName("defenderProcessesToExclude")]
        public IEnumerable<string> DefenderProcessesToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan direction.
        /// Controls which sets of files should be monitored. Possible values are: monitorAllFiles, monitorIncomingFilesOnly, monitorOutgoingFilesOnly.
        /// </summary>
        [JsonPropertyName("defenderScanDirection")]
        public DefenderRealtimeScanDirection? DefenderScanDirection { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan max cpu percentage.
        /// Represents the average CPU load factor for the Windows Defender scan (in percent). The default value is 50. Valid values 0 to 100
        /// </summary>
        [JsonPropertyName("defenderScanMaxCpuPercentage")]
        public Int32? DefenderScanMaxCpuPercentage { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan type.
        /// Selects whether to perform a quick scan or full scan. Possible values are: userDefined, disabled, quick, full.
        /// </summary>
        [JsonPropertyName("defenderScanType")]
        public DefenderScanType? DefenderScanType { get; set; }
    
        /// <summary>
        /// Gets or sets defender scheduled quick scan time.
        /// Selects the time of day that the Windows Defender quick scan should run. For example, a value of 0=12:00AM, a value of 60=1:00AM, a value of 120=2:00, and so on, up to a value of 1380=11:00PM. The default value is 120
        /// </summary>
        [JsonPropertyName("defenderScheduledQuickScanTime")]
        public TimeOfDay DefenderScheduledQuickScanTime { get; set; }
    
        /// <summary>
        /// Gets or sets defender scheduled scan day.
        /// Selects the day that the Windows Defender scan should run. Possible values are: userDefined, everyday, sunday, monday, tuesday, wednesday, thursday, friday, saturday, noScheduledScan.
        /// </summary>
        [JsonPropertyName("defenderScheduledScanDay")]
        public WeeklySchedule? DefenderScheduledScanDay { get; set; }
    
        /// <summary>
        /// Gets or sets defender scheduled scan time.
        /// Selects the time of day that the Windows Defender scan should run.
        /// </summary>
        [JsonPropertyName("defenderScheduledScanTime")]
        public TimeOfDay DefenderScheduledScanTime { get; set; }
    
        /// <summary>
        /// Gets or sets defender script downloaded payload execution.
        /// Value indicating the behavior of js/vbs executing payload downloaded from Internet. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderScriptDownloadedPayloadExecution")]
        public DefenderProtectionType? DefenderScriptDownloadedPayloadExecution { get; set; }
    
        /// <summary>
        /// Gets or sets defender script downloaded payload execution type.
        /// Value indicating the behavior of js/vbs executing payload downloaded from Internet. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderScriptDownloadedPayloadExecutionType")]
        public DefenderAttackSurfaceType? DefenderScriptDownloadedPayloadExecutionType { get; set; }
    
        /// <summary>
        /// Gets or sets defender script obfuscated macro code.
        /// Value indicating the behavior of obfuscated js/vbs/ps/macro code. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderScriptObfuscatedMacroCode")]
        public DefenderProtectionType? DefenderScriptObfuscatedMacroCode { get; set; }
    
        /// <summary>
        /// Gets or sets defender script obfuscated macro code type.
        /// Value indicating the behavior of obfuscated js/vbs/ps/macro code. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderScriptObfuscatedMacroCodeType")]
        public DefenderAttackSurfaceType? DefenderScriptObfuscatedMacroCodeType { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center block exploit protection override.
        /// Indicates whether or not to block user from overriding Exploit Protection settings.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterBlockExploitProtectionOverride")]
        public bool? DefenderSecurityCenterBlockExploitProtectionOverride { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable account ui.
        /// Used to disable the display of the account protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableAccountUI")]
        public bool? DefenderSecurityCenterDisableAccountUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable app browser ui.
        /// Used to disable the display of the app and browser protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableAppBrowserUI")]
        public bool? DefenderSecurityCenterDisableAppBrowserUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable clear tpm ui.
        /// Used to disable the display of the Clear TPM button.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableClearTpmUI")]
        public bool? DefenderSecurityCenterDisableClearTpmUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable family ui.
        /// Used to disable the display of the family options area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableFamilyUI")]
        public bool? DefenderSecurityCenterDisableFamilyUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable hardware ui.
        /// Used to disable the display of the hardware protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableHardwareUI")]
        public bool? DefenderSecurityCenterDisableHardwareUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable health ui.
        /// Used to disable the display of the device performance and health area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableHealthUI")]
        public bool? DefenderSecurityCenterDisableHealthUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable network ui.
        /// Used to disable the display of the firewall and network protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableNetworkUI")]
        public bool? DefenderSecurityCenterDisableNetworkUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable notification area ui.
        /// Used to disable the display of the notification area control. The user needs to either sign out and sign in or reboot the computer for this setting to take effect.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableNotificationAreaUI")]
        public bool? DefenderSecurityCenterDisableNotificationAreaUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable ransomware ui.
        /// Used to disable the display of the ransomware protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableRansomwareUI")]
        public bool? DefenderSecurityCenterDisableRansomwareUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable secure boot ui.
        /// Used to disable the display of the secure boot area under Device security.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableSecureBootUI")]
        public bool? DefenderSecurityCenterDisableSecureBootUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable troubleshooting ui.
        /// Used to disable the display of the security process troubleshooting under Device security.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableTroubleshootingUI")]
        public bool? DefenderSecurityCenterDisableTroubleshootingUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable virus ui.
        /// Used to disable the display of the virus and threat protection area.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableVirusUI")]
        public bool? DefenderSecurityCenterDisableVirusUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center disable vulnerable tpm firmware update ui.
        /// Used to disable the display of update TPM Firmware when a vulnerable firmware is detected.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterDisableVulnerableTpmFirmwareUpdateUI")]
        public bool? DefenderSecurityCenterDisableVulnerableTpmFirmwareUpdateUI { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center help email.
        /// The email address that is displayed to users.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterHelpEmail")]
        public string DefenderSecurityCenterHelpEmail { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center help phone.
        /// The phone number or Skype ID that is displayed to users.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterHelpPhone")]
        public string DefenderSecurityCenterHelpPhone { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center help url.
        /// The help portal URL this is displayed to users.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterHelpURL")]
        public string DefenderSecurityCenterHelpURL { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center itcontact display.
        /// Configure where to display IT contact information to end users. Possible values are: notConfigured, displayInAppAndInNotifications, displayOnlyInApp, displayOnlyInNotifications.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterITContactDisplay")]
        public DefenderSecurityCenterITContactDisplayType? DefenderSecurityCenterITContactDisplay { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center notifications from app.
        /// Notifications to show from the displayed areas of app. Possible values are: notConfigured, blockNoncriticalNotifications, blockAllNotifications.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterNotificationsFromApp")]
        public DefenderSecurityCenterNotificationsFromAppType? DefenderSecurityCenterNotificationsFromApp { get; set; }
    
        /// <summary>
        /// Gets or sets defender security center organization display name.
        /// The company name that is displayed to the users.
        /// </summary>
        [JsonPropertyName("defenderSecurityCenterOrganizationDisplayName")]
        public string DefenderSecurityCenterOrganizationDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets defender signature update interval in hours.
        /// Specifies the interval (in hours) that will be used to check for signatures, so instead of using the ScheduleDay and ScheduleTime the check for new signatures will be set according to the interval. Valid values 0 to 24
        /// </summary>
        [JsonPropertyName("defenderSignatureUpdateIntervalInHours")]
        public Int32? DefenderSignatureUpdateIntervalInHours { get; set; }
    
        /// <summary>
        /// Gets or sets defender submit samples consent type.
        /// Checks for the user consent level in Windows Defender to send data. Possible values are: sendSafeSamplesAutomatically, alwaysPrompt, neverSend, sendAllSamplesAutomatically.
        /// </summary>
        [JsonPropertyName("defenderSubmitSamplesConsentType")]
        public DefenderSubmitSamplesConsentType? DefenderSubmitSamplesConsentType { get; set; }
    
        /// <summary>
        /// Gets or sets defender untrusted executable.
        /// Value indicating response to executables that don't meet a prevalence, age, or trusted list criteria. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderUntrustedExecutable")]
        public DefenderProtectionType? DefenderUntrustedExecutable { get; set; }
    
        /// <summary>
        /// Gets or sets defender untrusted executable type.
        /// Value indicating response to executables that don't meet a prevalence, age, or trusted list criteria. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderUntrustedExecutableType")]
        public DefenderAttackSurfaceType? DefenderUntrustedExecutableType { get; set; }
    
        /// <summary>
        /// Gets or sets defender untrusted usbprocess.
        /// Value indicating response to untrusted and unsigned processes that run from USB. Possible values are: userDefined, enable, auditMode, warn, notConfigured.
        /// </summary>
        [JsonPropertyName("defenderUntrustedUSBProcess")]
        public DefenderProtectionType? DefenderUntrustedUSBProcess { get; set; }
    
        /// <summary>
        /// Gets or sets defender untrusted usbprocess type.
        /// Value indicating response to untrusted and unsigned processes that run from USB. Possible values are: userDefined, block, auditMode, warn, disable.
        /// </summary>
        [JsonPropertyName("defenderUntrustedUSBProcessType")]
        public DefenderAttackSurfaceType? DefenderUntrustedUSBProcessType { get; set; }
    
        /// <summary>
        /// Gets or sets device guard enable secure boot with dma.
        /// This property will be deprecated in May 2019 and will be replaced with property DeviceGuardSecureBootWithDMA. Specifies whether Platform Security Level is enabled at next reboot.
        /// </summary>
        [JsonPropertyName("deviceGuardEnableSecureBootWithDMA")]
        public bool? DeviceGuardEnableSecureBootWithDMA { get; set; }
    
        /// <summary>
        /// Gets or sets device guard enable virtualization based security.
        /// Turns On Virtualization Based Security(VBS).
        /// </summary>
        [JsonPropertyName("deviceGuardEnableVirtualizationBasedSecurity")]
        public bool? DeviceGuardEnableVirtualizationBasedSecurity { get; set; }
    
        /// <summary>
        /// Gets or sets device guard launch system guard.
        /// Allows the IT admin to configure the launch of System Guard. Possible values are: notConfigured, enabled, disabled.
        /// </summary>
        [JsonPropertyName("deviceGuardLaunchSystemGuard")]
        public Enablement? DeviceGuardLaunchSystemGuard { get; set; }
    
        /// <summary>
        /// Gets or sets device guard local system authority credential guard settings.
        /// Turn on Credential Guard when Platform Security Level with Secure Boot and Virtualization Based Security are both enabled. Possible values are: notConfigured, enableWithUEFILock, enableWithoutUEFILock, disable.
        /// </summary>
        [JsonPropertyName("deviceGuardLocalSystemAuthorityCredentialGuardSettings")]
        public DeviceGuardLocalSystemAuthorityCredentialGuardType? DeviceGuardLocalSystemAuthorityCredentialGuardSettings { get; set; }
    
        /// <summary>
        /// Gets or sets device guard secure boot with dma.
        /// Specifies whether Platform Security Level is enabled at next reboot. Possible values are: notConfigured, withoutDMA, withDMA.
        /// </summary>
        [JsonPropertyName("deviceGuardSecureBootWithDMA")]
        public SecureBootWithDMAType? DeviceGuardSecureBootWithDMA { get; set; }
    
        /// <summary>
        /// Gets or sets dma guard device enumeration policy.
        /// This policy is intended to provide additional security against external DMA capable devices. It allows for more control over the enumeration of external DMA capable devices incompatible with DMA Remapping/device memory isolation and sandboxing. This policy only takes effect when Kernel DMA Protection is supported and enabled by the system firmware. Kernel DMA Protection is a platform feature that cannot be controlled via policy or by end user. It has to be supported by the system at the time of manufacturing. To check if the system supports Kernel DMA Protection, please check the Kernel DMA Protection field in the Summary page of MSINFO32.exe.
        /// </summary>
        [JsonPropertyName("dmaGuardDeviceEnumerationPolicy")]
        public DmaGuardDeviceEnumerationPolicyType? DmaGuardDeviceEnumerationPolicy { get; set; }
    
        /// <summary>
        /// Gets or sets firewall block stateful ftp.
        /// Blocks stateful FTP connections to the device
        /// </summary>
        [JsonPropertyName("firewallBlockStatefulFTP")]
        public bool? FirewallBlockStatefulFTP { get; set; }
    
        /// <summary>
        /// Gets or sets firewall certificate revocation list check method.
        /// Specify how the certificate revocation list is to be enforced. Possible values are: deviceDefault, none, attempt, require.
        /// </summary>
        [JsonPropertyName("firewallCertificateRevocationListCheckMethod")]
        public FirewallCertificateRevocationListCheckMethodType? FirewallCertificateRevocationListCheckMethod { get; set; }
    
        /// <summary>
        /// Gets or sets firewall idle timeout for security association in seconds.
        /// Configures the idle timeout for security associations, in seconds, from 300 to 3600 inclusive. This is the period after which security associations will expire and be deleted. Valid values 300 to 3600
        /// </summary>
        [JsonPropertyName("firewallIdleTimeoutForSecurityAssociationInSeconds")]
        public Int32? FirewallIdleTimeoutForSecurityAssociationInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets firewall ipsec exemptions allow dhcp.
        /// Configures IPSec exemptions to allow both IPv4 and IPv6 DHCP traffic
        /// </summary>
        [JsonPropertyName("firewallIPSecExemptionsAllowDHCP")]
        public bool? FirewallIPSecExemptionsAllowDHCP { get; set; }
    
        /// <summary>
        /// Gets or sets firewall ipsec exemptions allow icmp.
        /// Configures IPSec exemptions to allow ICMP
        /// </summary>
        [JsonPropertyName("firewallIPSecExemptionsAllowICMP")]
        public bool? FirewallIPSecExemptionsAllowICMP { get; set; }
    
        /// <summary>
        /// Gets or sets firewall ipsec exemptions allow neighbor discovery.
        /// Configures IPSec exemptions to allow neighbor discovery IPv6 ICMP type-codes
        /// </summary>
        [JsonPropertyName("firewallIPSecExemptionsAllowNeighborDiscovery")]
        public bool? FirewallIPSecExemptionsAllowNeighborDiscovery { get; set; }
    
        /// <summary>
        /// Gets or sets firewall ipsec exemptions allow router discovery.
        /// Configures IPSec exemptions to allow router discovery IPv6 ICMP type-codes
        /// </summary>
        [JsonPropertyName("firewallIPSecExemptionsAllowRouterDiscovery")]
        public bool? FirewallIPSecExemptionsAllowRouterDiscovery { get; set; }
    
        /// <summary>
        /// Gets or sets firewall ipsec exemptions none.
        /// Configures IPSec exemptions to no exemptions
        /// </summary>
        [JsonPropertyName("firewallIPSecExemptionsNone")]
        public bool? FirewallIPSecExemptionsNone { get; set; }
    
        /// <summary>
        /// Gets or sets firewall merge keying module settings.
        /// If an authentication set is not fully supported by a keying module, direct the module to ignore only unsupported authentication suites rather than the entire set
        /// </summary>
        [JsonPropertyName("firewallMergeKeyingModuleSettings")]
        public bool? FirewallMergeKeyingModuleSettings { get; set; }
    
        /// <summary>
        /// Gets or sets firewall packet queueing method.
        /// Configures how packet queueing should be applied in the tunnel gateway scenario. Possible values are: deviceDefault, disabled, queueInbound, queueOutbound, queueBoth.
        /// </summary>
        [JsonPropertyName("firewallPacketQueueingMethod")]
        public FirewallPacketQueueingMethodType? FirewallPacketQueueingMethod { get; set; }
    
        /// <summary>
        /// Gets or sets firewall pre shared key encoding method.
        /// Select the preshared key encoding to be used. Possible values are: deviceDefault, none, utF8.
        /// </summary>
        [JsonPropertyName("firewallPreSharedKeyEncodingMethod")]
        public FirewallPreSharedKeyEncodingMethodType? FirewallPreSharedKeyEncodingMethod { get; set; }
    
        /// <summary>
        /// Gets or sets firewall profile domain.
        /// Configures the firewall profile settings for domain networks
        /// </summary>
        [JsonPropertyName("firewallProfileDomain")]
        public WindowsFirewallNetworkProfile FirewallProfileDomain { get; set; }
    
        /// <summary>
        /// Gets or sets firewall profile private.
        /// Configures the firewall profile settings for private networks
        /// </summary>
        [JsonPropertyName("firewallProfilePrivate")]
        public WindowsFirewallNetworkProfile FirewallProfilePrivate { get; set; }
    
        /// <summary>
        /// Gets or sets firewall profile public.
        /// Configures the firewall profile settings for public networks
        /// </summary>
        [JsonPropertyName("firewallProfilePublic")]
        public WindowsFirewallNetworkProfile FirewallProfilePublic { get; set; }
    
        /// <summary>
        /// Gets or sets firewall rules.
        /// Configures the firewall rule settings. This collection can contain a maximum of 150 elements.
        /// </summary>
        [JsonPropertyName("firewallRules")]
        public IEnumerable<WindowsFirewallRule> FirewallRules { get; set; }
    
        /// <summary>
        /// Gets or sets lan manager authentication level.
        /// This security setting determines which challenge/response authentication protocol is used for network logons. Possible values are: lmAndNltm, lmNtlmAndNtlmV2, lmAndNtlmOnly, lmAndNtlmV2, lmNtlmV2AndNotLm, lmNtlmV2AndNotLmOrNtm.
        /// </summary>
        [JsonPropertyName("lanManagerAuthenticationLevel")]
        public LanManagerAuthenticationLevel? LanManagerAuthenticationLevel { get; set; }
    
        /// <summary>
        /// Gets or sets lan manager workstation disable insecure guest logons.
        /// If enabled,the SMB client will allow insecure guest logons. If not configured, the SMB client will reject insecure guest logons.
        /// </summary>
        [JsonPropertyName("lanManagerWorkstationDisableInsecureGuestLogons")]
        public bool? LanManagerWorkstationDisableInsecureGuestLogons { get; set; }
    
        /// <summary>
        /// Gets or sets local security options administrator account name.
        /// Define a different account name to be associated with the security identifier (SID) for the account 'Administrator'.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAdministratorAccountName")]
        public string LocalSecurityOptionsAdministratorAccountName { get; set; }
    
        /// <summary>
        /// Gets or sets local security options administrator elevation prompt behavior.
        /// Define the behavior of the elevation prompt for admins in Admin Approval Mode. Possible values are: notConfigured, elevateWithoutPrompting, promptForCredentialsOnTheSecureDesktop, promptForConsentOnTheSecureDesktop, promptForCredentials, promptForConsent, promptForConsentForNonWindowsBinaries.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAdministratorElevationPromptBehavior")]
        public LocalSecurityOptionsAdministratorElevationPromptBehaviorType? LocalSecurityOptionsAdministratorElevationPromptBehavior { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow anonymous enumeration of samaccounts and shares.
        /// This security setting determines whether to allows anonymous users to perform certain activities, such as enumerating the names of domain accounts and network shares.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares")]
        public bool? LocalSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow pku2uauthentication requests.
        /// Block PKU2U authentication requests to this device to use online identities.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowPKU2UAuthenticationRequests")]
        public bool? LocalSecurityOptionsAllowPKU2UAuthenticationRequests { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow remote calls to security accounts manager.
        /// Edit the default Security Descriptor Definition Language string to allow or deny users and groups to make remote calls to the SAM.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowRemoteCallsToSecurityAccountsManager")]
        public string LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManager { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow remote calls to security accounts manager helper bool.
        /// UI helper boolean for LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManager entity
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool")]
        public bool? LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow system to be shut down without having to log on.
        /// This security setting determines whether a computer can be shut down without having to log on to Windows.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn")]
        public bool? LocalSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow uiaccess application elevation.
        /// Allow UIAccess apps to prompt for elevation without using the secure desktop.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowUIAccessApplicationElevation")]
        public bool? LocalSecurityOptionsAllowUIAccessApplicationElevation { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow uiaccess applications for secure locations.
        /// Allow UIAccess apps to prompt for elevation without using the secure desktop.Default is enabled
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowUIAccessApplicationsForSecureLocations")]
        public bool? LocalSecurityOptionsAllowUIAccessApplicationsForSecureLocations { get; set; }
    
        /// <summary>
        /// Gets or sets local security options allow undock without having to logon.
        /// Prevent a portable computer from being undocked without having to log in.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsAllowUndockWithoutHavingToLogon")]
        public bool? LocalSecurityOptionsAllowUndockWithoutHavingToLogon { get; set; }
    
        /// <summary>
        /// Gets or sets local security options block microsoft accounts.
        /// Prevent users from adding new Microsoft accounts to this computer.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsBlockMicrosoftAccounts")]
        public bool? LocalSecurityOptionsBlockMicrosoftAccounts { get; set; }
    
        /// <summary>
        /// Gets or sets local security options block remote logon with blank password.
        /// Enable Local accounts that are not password protected to log on from locations other than the physical device.Default is enabled
        /// </summary>
        [JsonPropertyName("localSecurityOptionsBlockRemoteLogonWithBlankPassword")]
        public bool? LocalSecurityOptionsBlockRemoteLogonWithBlankPassword { get; set; }
    
        /// <summary>
        /// Gets or sets local security options block remote optical drive access.
        /// Enabling this settings allows only interactively logged on user to access CD-ROM media.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsBlockRemoteOpticalDriveAccess")]
        public bool? LocalSecurityOptionsBlockRemoteOpticalDriveAccess { get; set; }
    
        /// <summary>
        /// Gets or sets local security options block users installing printer drivers.
        /// Restrict installing printer drivers as part of connecting to a shared printer to admins only.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsBlockUsersInstallingPrinterDrivers")]
        public bool? LocalSecurityOptionsBlockUsersInstallingPrinterDrivers { get; set; }
    
        /// <summary>
        /// Gets or sets local security options clear virtual memory page file.
        /// This security setting determines whether the virtual memory pagefile is cleared when the system is shut down.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsClearVirtualMemoryPageFile")]
        public bool? LocalSecurityOptionsClearVirtualMemoryPageFile { get; set; }
    
        /// <summary>
        /// Gets or sets local security options client digitally sign communications always.
        /// This security setting determines whether packet signing is required by the SMB client component.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsClientDigitallySignCommunicationsAlways")]
        public bool? LocalSecurityOptionsClientDigitallySignCommunicationsAlways { get; set; }
    
        /// <summary>
        /// Gets or sets local security options client send unencrypted password to third party smbservers.
        /// If this security setting is enabled, the Server Message Block (SMB) redirector is allowed to send plaintext passwords to non-Microsoft SMB servers that do not support password encryption during authentication.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers")]
        public bool? LocalSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers { get; set; }
    
        /// <summary>
        /// Gets or sets local security options detect application installations and prompt for elevation.
        /// App installations requiring elevated privileges will prompt for admin credentials.Default is enabled
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDetectApplicationInstallationsAndPromptForElevation")]
        public bool? LocalSecurityOptionsDetectApplicationInstallationsAndPromptForElevation { get; set; }
    
        /// <summary>
        /// Gets or sets local security options disable administrator account.
        /// Determines whether the Local Administrator account is enabled or disabled.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDisableAdministratorAccount")]
        public bool? LocalSecurityOptionsDisableAdministratorAccount { get; set; }
    
        /// <summary>
        /// Gets or sets local security options disable client digitally sign communications if server agrees.
        /// This security setting determines whether the SMB client attempts to negotiate SMB packet signing.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees")]
        public bool? LocalSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees { get; set; }
    
        /// <summary>
        /// Gets or sets local security options disable guest account.
        /// Determines if the Guest account is enabled or disabled.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDisableGuestAccount")]
        public bool? LocalSecurityOptionsDisableGuestAccount { get; set; }
    
        /// <summary>
        /// Gets or sets local security options disable server digitally sign communications always.
        /// This security setting determines whether packet signing is required by the SMB server component.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDisableServerDigitallySignCommunicationsAlways")]
        public bool? LocalSecurityOptionsDisableServerDigitallySignCommunicationsAlways { get; set; }
    
        /// <summary>
        /// Gets or sets local security options disable server digitally sign communications if client agrees.
        /// This security setting determines whether the SMB server will negotiate SMB packet signing with clients that request it.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees")]
        public bool? LocalSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees { get; set; }
    
        /// <summary>
        /// Gets or sets local security options do not allow anonymous enumeration of samaccounts.
        /// This security setting determines what additional permissions will be granted for anonymous connections to the computer.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts")]
        public bool? LocalSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts { get; set; }
    
        /// <summary>
        /// Gets or sets local security options do not require ctrl alt del.
        /// Require CTRL+ALT+DEL to be pressed before a user can log on.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDoNotRequireCtrlAltDel")]
        public bool? LocalSecurityOptionsDoNotRequireCtrlAltDel { get; set; }
    
        /// <summary>
        /// Gets or sets local security options do not store lanmanager hash value on next password change.
        /// This security setting determines if, at the next password change, the LAN Manager (LM) hash value for the new password is stored. It’s not stored by default.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange")]
        public bool? LocalSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange { get; set; }
    
        /// <summary>
        /// Gets or sets local security options format and eject of removable media allowed user.
        /// Define who is allowed to format and eject removable NTFS media. Possible values are: notConfigured, administrators, administratorsAndPowerUsers, administratorsAndInteractiveUsers.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser")]
        public LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUserType? LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser { get; set; }
    
        /// <summary>
        /// Gets or sets local security options guest account name.
        /// Define a different account name to be associated with the security identifier (SID) for the account 'Guest'.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsGuestAccountName")]
        public string LocalSecurityOptionsGuestAccountName { get; set; }
    
        /// <summary>
        /// Gets or sets local security options hide last signed in user.
        /// Do not display the username of the last person who signed in on this device.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsHideLastSignedInUser")]
        public bool? LocalSecurityOptionsHideLastSignedInUser { get; set; }
    
        /// <summary>
        /// Gets or sets local security options hide username at sign in.
        /// Do not display the username of the person signing in to this device after credentials are entered and before the device’s desktop is shown.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsHideUsernameAtSignIn")]
        public bool? LocalSecurityOptionsHideUsernameAtSignIn { get; set; }
    
        /// <summary>
        /// Gets or sets local security options information displayed on lock screen.
        /// Configure the user information that is displayed when the session is locked. If not configured, user display name, domain and username are shown. Possible values are: notConfigured, administrators, administratorsAndPowerUsers, administratorsAndInteractiveUsers.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsInformationDisplayedOnLockScreen")]
        public LocalSecurityOptionsInformationDisplayedOnLockScreenType? LocalSecurityOptionsInformationDisplayedOnLockScreen { get; set; }
    
        /// <summary>
        /// Gets or sets local security options information shown on lock screen.
        /// Configure the user information that is displayed when the session is locked. If not configured, user display name, domain and username are shown. Possible values are: notConfigured, userDisplayNameDomainUser, userDisplayNameOnly, doNotDisplayUser.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsInformationShownOnLockScreen")]
        public LocalSecurityOptionsInformationShownOnLockScreenType? LocalSecurityOptionsInformationShownOnLockScreen { get; set; }
    
        /// <summary>
        /// Gets or sets local security options log on message text.
        /// Set message text for users attempting to log in.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsLogOnMessageText")]
        public string LocalSecurityOptionsLogOnMessageText { get; set; }
    
        /// <summary>
        /// Gets or sets local security options log on message title.
        /// Set message title for users attempting to log in.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsLogOnMessageTitle")]
        public string LocalSecurityOptionsLogOnMessageTitle { get; set; }
    
        /// <summary>
        /// Gets or sets local security options machine inactivity limit.
        /// Define maximum minutes of inactivity on the interactive desktop’s login screen until the screen saver runs. Valid values 0 to 9999
        /// </summary>
        [JsonPropertyName("localSecurityOptionsMachineInactivityLimit")]
        public Int32? LocalSecurityOptionsMachineInactivityLimit { get; set; }
    
        /// <summary>
        /// Gets or sets local security options machine inactivity limit in minutes.
        /// Define maximum minutes of inactivity on the interactive desktop’s login screen until the screen saver runs. Valid values 0 to 9999
        /// </summary>
        [JsonPropertyName("localSecurityOptionsMachineInactivityLimitInMinutes")]
        public Int32? LocalSecurityOptionsMachineInactivityLimitInMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets local security options minimum session security for ntlm ssp based clients.
        /// This security setting allows a client to require the negotiation of 128-bit encryption and/or NTLMv2 session security. Possible values are: none, requireNtmlV2SessionSecurity, require128BitEncryption, ntlmV2And128BitEncryption.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients")]
        public LocalSecurityOptionsMinimumSessionSecurity? LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients { get; set; }
    
        /// <summary>
        /// Gets or sets local security options minimum session security for ntlm ssp based servers.
        /// This security setting allows a server to require the negotiation of 128-bit encryption and/or NTLMv2 session security. Possible values are: none, requireNtmlV2SessionSecurity, require128BitEncryption, ntlmV2And128BitEncryption.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers")]
        public LocalSecurityOptionsMinimumSessionSecurity? LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers { get; set; }
    
        /// <summary>
        /// Gets or sets local security options only elevate signed executables.
        /// Enforce PKI certification path validation for a given executable file before it is permitted to run.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsOnlyElevateSignedExecutables")]
        public bool? LocalSecurityOptionsOnlyElevateSignedExecutables { get; set; }
    
        /// <summary>
        /// Gets or sets local security options restrict anonymous access to named pipes and shares.
        /// By default, this security setting restricts anonymous access to shares and pipes to the settings for named pipes that can be accessed anonymously and Shares that can be accessed anonymously
        /// </summary>
        [JsonPropertyName("localSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares")]
        public bool? LocalSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares { get; set; }
    
        /// <summary>
        /// Gets or sets local security options smart card removal behavior.
        /// This security setting determines what happens when the smart card for a logged-on user is removed from the smart card reader. Possible values are: lockWorkstation, noAction, forceLogoff, disconnectRemoteDesktopSession.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsSmartCardRemovalBehavior")]
        public LocalSecurityOptionsSmartCardRemovalBehaviorType? LocalSecurityOptionsSmartCardRemovalBehavior { get; set; }
    
        /// <summary>
        /// Gets or sets local security options standard user elevation prompt behavior.
        /// Define the behavior of the elevation prompt for standard users. Possible values are: notConfigured, automaticallyDenyElevationRequests, promptForCredentialsOnTheSecureDesktop, promptForCredentials.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsStandardUserElevationPromptBehavior")]
        public LocalSecurityOptionsStandardUserElevationPromptBehaviorType? LocalSecurityOptionsStandardUserElevationPromptBehavior { get; set; }
    
        /// <summary>
        /// Gets or sets local security options switch to secure desktop when prompting for elevation.
        /// Enable all elevation requests to go to the interactive user's desktop rather than the secure desktop. Prompt behavior policy settings for admins and standard users are used.
        /// </summary>
        [JsonPropertyName("localSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation")]
        public bool? LocalSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation { get; set; }
    
        /// <summary>
        /// Gets or sets local security options use admin approval mode.
        /// Defines whether the built-in admin account uses Admin Approval Mode or runs all apps with full admin privileges.Default is enabled
        /// </summary>
        [JsonPropertyName("localSecurityOptionsUseAdminApprovalMode")]
        public bool? LocalSecurityOptionsUseAdminApprovalMode { get; set; }
    
        /// <summary>
        /// Gets or sets local security options use admin approval mode for administrators.
        /// Define whether Admin Approval Mode and all UAC policy settings are enabled, default is enabled
        /// </summary>
        [JsonPropertyName("localSecurityOptionsUseAdminApprovalModeForAdministrators")]
        public bool? LocalSecurityOptionsUseAdminApprovalModeForAdministrators { get; set; }
    
        /// <summary>
        /// Gets or sets local security options virtualize file and registry write failures to per user locations.
        /// Virtualize file and registry write failures to per user locations
        /// </summary>
        [JsonPropertyName("localSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations")]
        public bool? LocalSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations { get; set; }
    
        /// <summary>
        /// Gets or sets smart screen block override for files.
        /// Allows IT Admins to control whether users can can ignore SmartScreen warnings and run malicious files.
        /// </summary>
        [JsonPropertyName("smartScreenBlockOverrideForFiles")]
        public bool? SmartScreenBlockOverrideForFiles { get; set; }
    
        /// <summary>
        /// Gets or sets smart screen enable in shell.
        /// Allows IT Admins to configure SmartScreen for Windows.
        /// </summary>
        [JsonPropertyName("smartScreenEnableInShell")]
        public bool? SmartScreenEnableInShell { get; set; }
    
        /// <summary>
        /// Gets or sets user rights access credential manager as trusted caller.
        /// This user right is used by Credential Manager during Backup/Restore. Users' saved credentials might be compromised if this privilege is given to other entities. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsAccessCredentialManagerAsTrustedCaller")]
        public DeviceManagementUserRightsSetting UserRightsAccessCredentialManagerAsTrustedCaller { get; set; }
    
        /// <summary>
        /// Gets or sets user rights act as part of the operating system.
        /// This user right allows a process to impersonate any user without authentication. The process can therefore gain access to the same local resources as that user. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsActAsPartOfTheOperatingSystem")]
        public DeviceManagementUserRightsSetting UserRightsActAsPartOfTheOperatingSystem { get; set; }
    
        /// <summary>
        /// Gets or sets user rights allow access from network.
        /// This user right determines which users and groups are allowed to connect to the computer over the network. State Allowed is supported.
        /// </summary>
        [JsonPropertyName("userRightsAllowAccessFromNetwork")]
        public DeviceManagementUserRightsSetting UserRightsAllowAccessFromNetwork { get; set; }
    
        /// <summary>
        /// Gets or sets user rights backup data.
        /// This user right determines which users can bypass file, directory, registry, and other persistent objects permissions when backing up files and directories. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsBackupData")]
        public DeviceManagementUserRightsSetting UserRightsBackupData { get; set; }
    
        /// <summary>
        /// Gets or sets user rights block access from network.
        /// This user right determines which users and groups are block from connecting to the computer over the network. State Block is supported.
        /// </summary>
        [JsonPropertyName("userRightsBlockAccessFromNetwork")]
        public DeviceManagementUserRightsSetting UserRightsBlockAccessFromNetwork { get; set; }
    
        /// <summary>
        /// Gets or sets user rights change system time.
        /// This user right determines which users and groups can change the time and date on the internal clock of the computer. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsChangeSystemTime")]
        public DeviceManagementUserRightsSetting UserRightsChangeSystemTime { get; set; }
    
        /// <summary>
        /// Gets or sets user rights create global objects.
        /// This security setting determines whether users can create global objects that are available to all sessions. Users who can create global objects could affect processes that run under other users' sessions, which could lead to application failure or data corruption. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsCreateGlobalObjects")]
        public DeviceManagementUserRightsSetting UserRightsCreateGlobalObjects { get; set; }
    
        /// <summary>
        /// Gets or sets user rights create page file.
        /// This user right determines which users and groups can call an internal API to create and change the size of a page file. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsCreatePageFile")]
        public DeviceManagementUserRightsSetting UserRightsCreatePageFile { get; set; }
    
        /// <summary>
        /// Gets or sets user rights create permanent shared objects.
        /// This user right determines which accounts can be used by processes to create a directory object using the object manager. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsCreatePermanentSharedObjects")]
        public DeviceManagementUserRightsSetting UserRightsCreatePermanentSharedObjects { get; set; }
    
        /// <summary>
        /// Gets or sets user rights create symbolic links.
        /// This user right determines if the user can create a symbolic link from the computer to which they are logged on. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsCreateSymbolicLinks")]
        public DeviceManagementUserRightsSetting UserRightsCreateSymbolicLinks { get; set; }
    
        /// <summary>
        /// Gets or sets user rights create token.
        /// This user right determines which users/groups can be used by processes to create a token that can then be used to get access to any local resources when the process uses an internal API to create an access token. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsCreateToken")]
        public DeviceManagementUserRightsSetting UserRightsCreateToken { get; set; }
    
        /// <summary>
        /// Gets or sets user rights debug programs.
        /// This user right determines which users can attach a debugger to any process or to the kernel. Only states NotConfigured and Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsDebugPrograms")]
        public DeviceManagementUserRightsSetting UserRightsDebugPrograms { get; set; }
    
        /// <summary>
        /// Gets or sets user rights delegation.
        /// This user right determines which users can set the Trusted for Delegation setting on a user or computer object. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsDelegation")]
        public DeviceManagementUserRightsSetting UserRightsDelegation { get; set; }
    
        /// <summary>
        /// Gets or sets user rights deny local log on.
        /// This user right determines which users cannot log on to the computer. States NotConfigured, Blocked are supported
        /// </summary>
        [JsonPropertyName("userRightsDenyLocalLogOn")]
        public DeviceManagementUserRightsSetting UserRightsDenyLocalLogOn { get; set; }
    
        /// <summary>
        /// Gets or sets user rights generate security audits.
        /// This user right determines which accounts can be used by a process to add entries to the security log. The security log is used to trace unauthorized system access.  Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsGenerateSecurityAudits")]
        public DeviceManagementUserRightsSetting UserRightsGenerateSecurityAudits { get; set; }
    
        /// <summary>
        /// Gets or sets user rights impersonate client.
        /// Assigning this user right to a user allows programs running on behalf of that user to impersonate a client. Requiring this user right for this kind of impersonation prevents an unauthorized user from convincing a client to connect to a service that they have created and then impersonating that client, which can elevate the unauthorized user's permissions to administrative or system levels. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsImpersonateClient")]
        public DeviceManagementUserRightsSetting UserRightsImpersonateClient { get; set; }
    
        /// <summary>
        /// Gets or sets user rights increase scheduling priority.
        /// This user right determines which accounts can use a process with Write Property access to another process to increase the execution priority assigned to the other process. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsIncreaseSchedulingPriority")]
        public DeviceManagementUserRightsSetting UserRightsIncreaseSchedulingPriority { get; set; }
    
        /// <summary>
        /// Gets or sets user rights load unload drivers.
        /// This user right determines which users can dynamically load and unload device drivers or other code in to kernel mode. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsLoadUnloadDrivers")]
        public DeviceManagementUserRightsSetting UserRightsLoadUnloadDrivers { get; set; }
    
        /// <summary>
        /// Gets or sets user rights local log on.
        /// This user right determines which users can log on to the computer. States NotConfigured, Allowed are supported
        /// </summary>
        [JsonPropertyName("userRightsLocalLogOn")]
        public DeviceManagementUserRightsSetting UserRightsLocalLogOn { get; set; }
    
        /// <summary>
        /// Gets or sets user rights lock memory.
        /// This user right determines which accounts can use a process to keep data in physical memory, which prevents the system from paging the data to virtual memory on disk. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsLockMemory")]
        public DeviceManagementUserRightsSetting UserRightsLockMemory { get; set; }
    
        /// <summary>
        /// Gets or sets user rights manage auditing and security logs.
        /// This user right determines which users can specify object access auditing options for individual resources, such as files, Active Directory objects, and registry keys. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsManageAuditingAndSecurityLogs")]
        public DeviceManagementUserRightsSetting UserRightsManageAuditingAndSecurityLogs { get; set; }
    
        /// <summary>
        /// Gets or sets user rights manage volumes.
        /// This user right determines which users and groups can run maintenance tasks on a volume, such as remote defragmentation. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsManageVolumes")]
        public DeviceManagementUserRightsSetting UserRightsManageVolumes { get; set; }
    
        /// <summary>
        /// Gets or sets user rights modify firmware environment.
        /// This user right determines who can modify firmware environment values. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsModifyFirmwareEnvironment")]
        public DeviceManagementUserRightsSetting UserRightsModifyFirmwareEnvironment { get; set; }
    
        /// <summary>
        /// Gets or sets user rights modify object labels.
        /// This user right determines which user accounts can modify the integrity label of objects, such as files, registry keys, or processes owned by other users. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsModifyObjectLabels")]
        public DeviceManagementUserRightsSetting UserRightsModifyObjectLabels { get; set; }
    
        /// <summary>
        /// Gets or sets user rights profile single process.
        /// This user right determines which users can use performance monitoring tools to monitor the performance of system processes. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsProfileSingleProcess")]
        public DeviceManagementUserRightsSetting UserRightsProfileSingleProcess { get; set; }
    
        /// <summary>
        /// Gets or sets user rights remote desktop services log on.
        /// This user right determines which users and groups are prohibited from logging on as a Remote Desktop Services client. Only states NotConfigured and Blocked are supported
        /// </summary>
        [JsonPropertyName("userRightsRemoteDesktopServicesLogOn")]
        public DeviceManagementUserRightsSetting UserRightsRemoteDesktopServicesLogOn { get; set; }
    
        /// <summary>
        /// Gets or sets user rights remote shutdown.
        /// This user right determines which users are allowed to shut down a computer from a remote location on the network. Misuse of this user right can result in a denial of service. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsRemoteShutdown")]
        public DeviceManagementUserRightsSetting UserRightsRemoteShutdown { get; set; }
    
        /// <summary>
        /// Gets or sets user rights restore data.
        /// This user right determines which users can bypass file, directory, registry, and other persistent objects permissions when restoring backed up files and directories, and determines which users can set any valid security principal as the owner of an object. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsRestoreData")]
        public DeviceManagementUserRightsSetting UserRightsRestoreData { get; set; }
    
        /// <summary>
        /// Gets or sets user rights take ownership.
        /// This user right determines which users can take ownership of any securable object in the system, including Active Directory objects, files and folders, printers, registry keys, processes, and threads. Only states NotConfigured and Allowed are supported.
        /// </summary>
        [JsonPropertyName("userRightsTakeOwnership")]
        public DeviceManagementUserRightsSetting UserRightsTakeOwnership { get; set; }
    
        /// <summary>
        /// Gets or sets windows defender tamper protection.
        /// Configure windows defender TamperProtection settings. Possible values are: notConfigured, enable, disable.
        /// </summary>
        [JsonPropertyName("windowsDefenderTamperProtection")]
        public WindowsDefenderTamperProtectionOptions? WindowsDefenderTamperProtection { get; set; }
    
        /// <summary>
        /// Gets or sets xbox services accessory management service startup mode.
        /// This setting determines whether the Accessory management service's start type is Automatic(2), Manual(3), Disabled(4). Default: Manual. Possible values are: manual, automatic, disabled.
        /// </summary>
        [JsonPropertyName("xboxServicesAccessoryManagementServiceStartupMode")]
        public ServiceStartType? XboxServicesAccessoryManagementServiceStartupMode { get; set; }
    
        /// <summary>
        /// Gets or sets xbox services enable xbox game save task.
        /// This setting determines whether xbox game save is enabled (1) or disabled (0).
        /// </summary>
        [JsonPropertyName("xboxServicesEnableXboxGameSaveTask")]
        public bool? XboxServicesEnableXboxGameSaveTask { get; set; }
    
        /// <summary>
        /// Gets or sets xbox services live auth manager service startup mode.
        /// This setting determines whether Live Auth Manager service's start type is Automatic(2), Manual(3), Disabled(4). Default: Manual. Possible values are: manual, automatic, disabled.
        /// </summary>
        [JsonPropertyName("xboxServicesLiveAuthManagerServiceStartupMode")]
        public ServiceStartType? XboxServicesLiveAuthManagerServiceStartupMode { get; set; }
    
        /// <summary>
        /// Gets or sets xbox services live game save service startup mode.
        /// This setting determines whether Live Game save service's start type is Automatic(2), Manual(3), Disabled(4). Default: Manual. Possible values are: manual, automatic, disabled.
        /// </summary>
        [JsonPropertyName("xboxServicesLiveGameSaveServiceStartupMode")]
        public ServiceStartType? XboxServicesLiveGameSaveServiceStartupMode { get; set; }
    
        /// <summary>
        /// Gets or sets xbox services live networking service startup mode.
        /// This setting determines whether Networking service's start type is Automatic(2), Manual(3), Disabled(4). Default: Manual. Possible values are: manual, automatic, disabled.
        /// </summary>
        [JsonPropertyName("xboxServicesLiveNetworkingServiceStartupMode")]
        public ServiceStartType? XboxServicesLiveNetworkingServiceStartupMode { get; set; }
    
    }
}

