// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type CloudPcConnectivityEvent.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<CloudPcConnectivityEvent>))]
    public partial class CloudPcConnectivityEvent
    {

        /// <summary>
        /// Gets or sets eventDateTime.
        /// Indicates the date and time when this event was created. The timestamp is shown in ISO 8601 format and Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2014 appears as 2014-01-01T00:00:00Z.
        /// </summary>
        [JsonPropertyName("eventDateTime")]
        public DateTimeOffset? EventDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets eventName.
        /// Name of the event.
        /// </summary>
        [JsonPropertyName("eventName")]
        public string EventName { get; set; }
    
        /// <summary>
        /// Gets or sets eventResult.
        /// Result of this event. Possible values are: unknown, success, failure, and unknownFutureValue.
        /// </summary>
        [JsonPropertyName("eventResult")]
        public CloudPcConnectivityEventResult? EventResult { get; set; }
    
        /// <summary>
        /// Gets or sets eventType.
        /// Type of this event. Possible values are: unknown, userConnection, userTroubleshooting, deviceHealthCheck, and unknownFutureValue.
        /// </summary>
        [JsonPropertyName("eventType")]
        public CloudPcConnectivityEventType? EventType { get; set; }
    
        /// <summary>
        /// Gets or sets message.
        /// Additional message for this event.
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
