// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type AppleVpnAlwaysOnConfiguration.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<AppleVpnAlwaysOnConfiguration>))]
    public partial class AppleVpnAlwaysOnConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppleVpnAlwaysOnConfiguration"/> class.
        /// </summary>
        public AppleVpnAlwaysOnConfiguration()
        {
            this.ODataType = "microsoft.graph.appleVpnAlwaysOnConfiguration";
        }

        /// <summary>
        /// Gets or sets airPrintExceptionAction.
        /// Determine whether AirPrint service will be exempt from the always-on VPN connection. Possible values are: forceTrafficViaVPN, allowTrafficOutside, dropTraffic.
        /// </summary>
        [JsonPropertyName("airPrintExceptionAction")]
        public VpnServiceExceptionAction? AirPrintExceptionAction { get; set; }
    
        /// <summary>
        /// Gets or sets allowAllCaptiveNetworkPlugins.
        /// Specifies whether traffic from all captive network plugins should be allowed outside the vpn
        /// </summary>
        [JsonPropertyName("allowAllCaptiveNetworkPlugins")]
        public bool? AllowAllCaptiveNetworkPlugins { get; set; }
    
        /// <summary>
        /// Gets or sets allowCaptiveWebSheet.
        /// Determines whether traffic from the Websheet app is allowed outside of the VPN
        /// </summary>
        [JsonPropertyName("allowCaptiveWebSheet")]
        public bool? AllowCaptiveWebSheet { get; set; }
    
        /// <summary>
        /// Gets or sets allowedCaptiveNetworkPlugins.
        /// Determines whether all, some, or no non-native captive networking apps are allowed
        /// </summary>
        [JsonPropertyName("allowedCaptiveNetworkPlugins")]
        public SpecifiedCaptiveNetworkPlugins AllowedCaptiveNetworkPlugins { get; set; }
    
        /// <summary>
        /// Gets or sets cellularExceptionAction.
        /// Determine whether Cellular service will be exempt from the always-on VPN connection. Possible values are: forceTrafficViaVPN, allowTrafficOutside, dropTraffic.
        /// </summary>
        [JsonPropertyName("cellularExceptionAction")]
        public VpnServiceExceptionAction? CellularExceptionAction { get; set; }
    
        /// <summary>
        /// Gets or sets natKeepAliveIntervalInSeconds.
        /// Specifies how often in seconds to send a network address translation keepalive package through the VPN
        /// </summary>
        [JsonPropertyName("natKeepAliveIntervalInSeconds")]
        public Int32? NatKeepAliveIntervalInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets natKeepAliveOffloadEnable.
        /// Enable hardware offloading of NAT keepalive signals when the device is asleep
        /// </summary>
        [JsonPropertyName("natKeepAliveOffloadEnable")]
        public bool? NatKeepAliveOffloadEnable { get; set; }
    
        /// <summary>
        /// Gets or sets tunnelConfiguration.
        /// Determines what connections the specific tunnel configuration applies to. Possible values are: wifiAndCellular, cellular, wifi.
        /// </summary>
        [JsonPropertyName("tunnelConfiguration")]
        public VpnTunnelConfigurationType? TunnelConfiguration { get; set; }
    
        /// <summary>
        /// Gets or sets userToggleEnabled.
        /// Allow the user to toggle the VPN configuration using the UI
        /// </summary>
        [JsonPropertyName("userToggleEnabled")]
        public bool? UserToggleEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets voicemailExceptionAction.
        /// Determine whether voicemail service will be exempt from the always-on VPN connection. Possible values are: forceTrafficViaVPN, allowTrafficOutside, dropTraffic.
        /// </summary>
        [JsonPropertyName("voicemailExceptionAction")]
        public VpnServiceExceptionAction? VoicemailExceptionAction { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
