// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: ComplexType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type TeamworkOnPremisesCalendarSyncConfiguration.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<TeamworkOnPremisesCalendarSyncConfiguration>))]
    public partial class TeamworkOnPremisesCalendarSyncConfiguration
    {

        /// <summary>
        /// Gets or sets domain.
        /// The fully qualified domain name (FQDN) of the Skype for Business Server. Use the Exchange domain if the Skype for Business SIP domain is different from the Exchange domain of the user.
        /// </summary>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }
    
        /// <summary>
        /// Gets or sets domainUserName.
        /// The domain and username of the console device, for example, Seattle/RanierConf.
        /// </summary>
        [JsonPropertyName("domainUserName")]
        public string DomainUserName { get; set; }
    
        /// <summary>
        /// Gets or sets smtpAddress.
        /// The Simple Mail Transfer Protocol (SMTP) address of the user account. This is only required if a different user principal name (UPN) is used to sign in to Exchange other than Microsoft Teams and Skype for Business. This is a common scenario in a hybrid environment where an on-premises Exchange server is used.
        /// </summary>
        [JsonPropertyName("smtpAddress")]
        public string SmtpAddress { get; set; }
    
        /// <summary>
        /// Gets or sets additional data.
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets @odata.type.
        /// </summary>
        [JsonPropertyName("@odata.type")]
        public string ODataType { get; set; }
    
    }
}
