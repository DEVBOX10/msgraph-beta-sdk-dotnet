// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type User PFXCertificate.
    /// </summary>
    [JsonConverter(typeof(DerivedTypeConverter<UserPFXCertificate>))]
    public partial class UserPFXCertificate : Entity
    {
    
		///<summary>
		/// The UserPFXCertificate constructor
		///</summary>
        public UserPFXCertificate()
        {
            this.ODataType = "microsoft.graph.userPFXCertificate";
        }
	
        /// <summary>
        /// Gets or sets created date time.
        /// Date/time when this PFX certificate was imported.
        /// </summary>
        [JsonPropertyName("createdDateTime")]
        public DateTimeOffset? CreatedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets encrypted pfx blob.
        /// Encrypted PFX blob.
        /// </summary>
        [JsonPropertyName("encryptedPfxBlob")]
        public byte[] EncryptedPfxBlob { get; set; }
    
        /// <summary>
        /// Gets or sets encrypted pfx password.
        /// Encrypted PFX password.
        /// </summary>
        [JsonPropertyName("encryptedPfxPassword")]
        public string EncryptedPfxPassword { get; set; }
    
        /// <summary>
        /// Gets or sets expiration date time.
        /// Certificate's validity expiration date/time.
        /// </summary>
        [JsonPropertyName("expirationDateTime")]
        public DateTimeOffset? ExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets intended purpose.
        /// Certificate's intended purpose from the point-of-view of deployment. Possible values are: unassigned, smimeEncryption, smimeSigning, vpn, wifi.
        /// </summary>
        [JsonPropertyName("intendedPurpose")]
        public UserPfxIntendedPurpose? IntendedPurpose { get; set; }
    
        /// <summary>
        /// Gets or sets key name.
        /// Name of the key (within the provider) used to encrypt the blob.
        /// </summary>
        [JsonPropertyName("keyName")]
        public string KeyName { get; set; }
    
        /// <summary>
        /// Gets or sets last modified date time.
        /// Date/time when this PFX certificate was last modified.
        /// </summary>
        [JsonPropertyName("lastModifiedDateTime")]
        public DateTimeOffset? LastModifiedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets padding scheme.
        /// Padding scheme used by the provider during encryption/decryption. Possible values are: none, pkcs1, oaepSha1, oaepSha256, oaepSha384, oaepSha512.
        /// </summary>
        [JsonPropertyName("paddingScheme")]
        public UserPfxPaddingScheme? PaddingScheme { get; set; }
    
        /// <summary>
        /// Gets or sets provider name.
        /// Crypto provider used to encrypt this blob.
        /// </summary>
        [JsonPropertyName("providerName")]
        public string ProviderName { get; set; }
    
        /// <summary>
        /// Gets or sets start date time.
        /// Certificate's validity start date/time.
        /// </summary>
        [JsonPropertyName("startDateTime")]
        public DateTimeOffset? StartDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets thumbprint.
        /// SHA-1 thumbprint of the PFX certificate.
        /// </summary>
        [JsonPropertyName("thumbprint")]
        public string Thumbprint { get; set; }
    
        /// <summary>
        /// Gets or sets user principal name.
        /// User Principal Name of the PFX certificate.
        /// </summary>
        [JsonPropertyName("userPrincipalName")]
        public string UserPrincipalName { get; set; }
    
    }
}

