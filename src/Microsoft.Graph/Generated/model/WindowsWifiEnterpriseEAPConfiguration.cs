// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Windows Wifi Enterprise EAPConfiguration.
    /// </summary>
    public partial class WindowsWifiEnterpriseEAPConfiguration : WindowsWifiConfiguration
    {
    
		///<summary>
		/// The WindowsWifiEnterpriseEAPConfiguration constructor
		///</summary>
        public WindowsWifiEnterpriseEAPConfiguration()
        {
            this.ODataType = "microsoft.graph.windowsWifiEnterpriseEAPConfiguration";
        }
	
        /// <summary>
        /// Gets or sets authentication method.
        /// Specify the authentication method. Possible values are: certificate, usernameAndPassword, derivedCredential.
        /// </summary>
        [JsonPropertyName("authenticationMethod")]
        public WiFiAuthenticationMethod? AuthenticationMethod { get; set; }
    
        /// <summary>
        /// Gets or sets authentication period in seconds.
        /// Specify the number of seconds for the client to wait after an authentication attempt before failing. Valid range 1-3600.
        /// </summary>
        [JsonPropertyName("authenticationPeriodInSeconds")]
        public Int32? AuthenticationPeriodInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets authentication retry delay period in seconds.
        /// Specify the number of seconds between a failed authentication and the next authentication attempt. Valid range 1-3600.
        /// </summary>
        [JsonPropertyName("authenticationRetryDelayPeriodInSeconds")]
        public Int32? AuthenticationRetryDelayPeriodInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets authentication type.
        /// Specify whether to authenticate the user, the device, either, or to use guest authentication (none). If you’re using certificate authentication, make sure the certificate type matches the authentication type. Possible values are: none, user, machine, machineOrUser, guest.
        /// </summary>
        [JsonPropertyName("authenticationType")]
        public WifiAuthenticationType? AuthenticationType { get; set; }
    
        /// <summary>
        /// Gets or sets cache credentials.
        /// Specify whether to cache user credentials on the device so that users don’t need to keep entering them each time they connect.
        /// </summary>
        [JsonPropertyName("cacheCredentials")]
        public bool? CacheCredentials { get; set; }
    
        /// <summary>
        /// Gets or sets disable user prompt for server validation.
        /// Specify whether to prevent the user from being prompted to authorize new servers for trusted certification authorities when EAP type is selected as PEAP.
        /// </summary>
        [JsonPropertyName("disableUserPromptForServerValidation")]
        public bool? DisableUserPromptForServerValidation { get; set; }
    
        /// <summary>
        /// Gets or sets eapol start period in seconds.
        /// Specify the number of seconds to wait before sending an EAPOL (Extensible Authentication Protocol over LAN) Start message. Valid range 1-3600.
        /// </summary>
        [JsonPropertyName("eapolStartPeriodInSeconds")]
        public Int32? EapolStartPeriodInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets eap type.
        /// Extensible Authentication Protocol (EAP). Indicates the type of EAP protocol set on the Wi-Fi endpoint (router). Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast.
        /// </summary>
        [JsonPropertyName("eapType")]
        public EapType? EapType { get; set; }
    
        /// <summary>
        /// Gets or sets enable pairwise master key caching.
        /// Specify whether the wifi connection should enable pairwise master key caching.
        /// </summary>
        [JsonPropertyName("enablePairwiseMasterKeyCaching")]
        public bool? EnablePairwiseMasterKeyCaching { get; set; }
    
        /// <summary>
        /// Gets or sets enable pre authentication.
        /// Specify whether pre-authentication should be enabled.
        /// </summary>
        [JsonPropertyName("enablePreAuthentication")]
        public bool? EnablePreAuthentication { get; set; }
    
        /// <summary>
        /// Gets or sets inner authentication protocol for eapttls.
        /// Specify inner authentication protocol for EAP TTLS. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo.
        /// </summary>
        [JsonPropertyName("innerAuthenticationProtocolForEAPTTLS")]
        public NonEapAuthenticationMethodForEapTtlsType? InnerAuthenticationProtocolForEAPTTLS { get; set; }
    
        /// <summary>
        /// Gets or sets maximum authentication failures.
        /// Specify the maximum authentication failures allowed for a set of credentials. Valid range 1-100.
        /// </summary>
        [JsonPropertyName("maximumAuthenticationFailures")]
        public Int32? MaximumAuthenticationFailures { get; set; }
    
        /// <summary>
        /// Gets or sets maximum authentication timeout in seconds.
        /// Specify maximum authentication timeout (in seconds).  Valid range: 1-120
        /// </summary>
        [JsonPropertyName("maximumAuthenticationTimeoutInSeconds")]
        public Int32? MaximumAuthenticationTimeoutInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets maximum eapolstart messages.
        /// Specifiy the maximum number of EAPOL (Extensible Authentication Protocol over LAN) Start messages to be sent before returning failure. Valid range 1-100.
        /// </summary>
        [JsonPropertyName("maximumEAPOLStartMessages")]
        public Int32? MaximumEAPOLStartMessages { get; set; }
    
        /// <summary>
        /// Gets or sets maximum number of pairwise master keys in cache.
        /// Specify maximum number of pairwise master keys in cache.  Valid range: 1-255
        /// </summary>
        [JsonPropertyName("maximumNumberOfPairwiseMasterKeysInCache")]
        public Int32? MaximumNumberOfPairwiseMasterKeysInCache { get; set; }
    
        /// <summary>
        /// Gets or sets maximum pairwise master key cache time in minutes.
        /// Specify maximum pairwise master key cache time (in minutes).  Valid range: 5-1440
        /// </summary>
        [JsonPropertyName("maximumPairwiseMasterKeyCacheTimeInMinutes")]
        public Int32? MaximumPairwiseMasterKeyCacheTimeInMinutes { get; set; }
    
        /// <summary>
        /// Gets or sets maximum pre authentication attempts.
        /// Specify maximum pre-authentication attempts.  Valid range: 1-16
        /// </summary>
        [JsonPropertyName("maximumPreAuthenticationAttempts")]
        public Int32? MaximumPreAuthenticationAttempts { get; set; }
    
        /// <summary>
        /// Gets or sets network single sign on.
        /// Specify the network single sign on type. Possible values are: disabled, prelogon, postlogon.
        /// </summary>
        [JsonPropertyName("networkSingleSignOn")]
        public NetworkSingleSignOnType? NetworkSingleSignOn { get; set; }
    
        /// <summary>
        /// Gets or sets outer identity privacy temporary value.
        /// Specify the string to replace usernames for privacy when using EAP TTLS or PEAP.
        /// </summary>
        [JsonPropertyName("outerIdentityPrivacyTemporaryValue")]
        public string OuterIdentityPrivacyTemporaryValue { get; set; }
    
        /// <summary>
        /// Gets or sets perform server validation.
        /// Specify whether to enable verification of server's identity by validating the certificate when EAP type is selected as PEAP.
        /// </summary>
        [JsonPropertyName("performServerValidation")]
        public bool? PerformServerValidation { get; set; }
    
        /// <summary>
        /// Gets or sets prompt for additional authentication credentials.
        /// Specify whether the wifi connection should prompt for additional authentication credentials.
        /// </summary>
        [JsonPropertyName("promptForAdditionalAuthenticationCredentials")]
        public bool? PromptForAdditionalAuthenticationCredentials { get; set; }
    
        /// <summary>
        /// Gets or sets require cryptographic binding.
        /// Specify whether to enable cryptographic binding when EAP type is selected as PEAP.
        /// </summary>
        [JsonPropertyName("requireCryptographicBinding")]
        public bool? RequireCryptographicBinding { get; set; }
    
        /// <summary>
        /// Gets or sets trusted server certificate names.
        /// Specify trusted server certificate names.
        /// </summary>
        [JsonPropertyName("trustedServerCertificateNames")]
        public IEnumerable<string> TrustedServerCertificateNames { get; set; }
    
        /// <summary>
        /// Gets or sets user based virtual lan.
        /// Specifiy whether to change the virtual LAN used by the device based on the user’s credentials. Cannot be used when NetworkSingleSignOnType is set to ​Disabled.
        /// </summary>
        [JsonPropertyName("userBasedVirtualLan")]
        public bool? UserBasedVirtualLan { get; set; }
    
        /// <summary>
        /// Gets or sets identity certificate for client authentication.
        /// Specify identity certificate for client authentication.
        /// </summary>
        [JsonPropertyName("identityCertificateForClientAuthentication")]
        public WindowsCertificateProfileBase IdentityCertificateForClientAuthentication { get; set; }
    
        /// <summary>
        /// Gets or sets root certificate for client validation.
        /// Specify root certificate for client validation.
        /// </summary>
        [JsonPropertyName("rootCertificateForClientValidation")]
        public Windows81TrustedRootCertificate RootCertificateForClientValidation { get; set; }
    
        /// <summary>
        /// Gets or sets root certificates for server validation.
        /// Specify root certificate for server validation.
        /// </summary>
        [JsonPropertyName("rootCertificatesForServerValidation")]
        public IWindowsWifiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionPage RootCertificatesForServerValidation { get; set; }

        /// <summary>
        /// Gets or sets rootCertificatesForServerValidationNextLink.
        /// </summary>
        [JsonPropertyName("rootCertificatesForServerValidation@odata.nextLink")]
        public string RootCertificatesForServerValidationNextLink { get; set; }
    
    }
}

