// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequestBuilder.cs.tt

namespace Microsoft.Graph.IdentityGovernanceNamespace
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type WorkflowRequestBuilder.
    /// </summary>
    public partial class WorkflowRequestBuilder : WorkflowBaseRequestBuilder, IWorkflowRequestBuilder
    {

        /// <summary>
        /// Constructs a new WorkflowRequestBuilder.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="Microsoft.Graph.IBaseClient"/> for handling requests.</param>
        public WorkflowRequestBuilder(
            string requestUrl,
            Microsoft.Graph.IBaseClient client)
            : base(requestUrl, client)
        {
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <returns>The built request.</returns>
        public new IWorkflowRequest Request()
        {
            return this.Request(null);
        }

        /// <summary>
        /// Builds the request.
        /// </summary>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>The built request.</returns>
        public new IWorkflowRequest Request(IEnumerable<Microsoft.Graph.Option> options)
        {
            return new WorkflowRequest(this.RequestUrl, this.Client, options);
        }
    
        /// <summary>
        /// Gets the request builder for ExecutionScope.
        /// </summary>
        /// <returns>The <see cref="IWorkflowExecutionScopeCollectionWithReferencesRequestBuilder"/>.</returns>
        public IWorkflowExecutionScopeCollectionWithReferencesRequestBuilder ExecutionScope
        {
            get
            {
                return new WorkflowExecutionScopeCollectionWithReferencesRequestBuilder(this.AppendSegmentToRequestUrl("executionScope"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Runs.
        /// </summary>
        /// <returns>The <see cref="IWorkflowRunsCollectionRequestBuilder"/>.</returns>
        public IWorkflowRunsCollectionRequestBuilder Runs
        {
            get
            {
                return new WorkflowRunsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("runs"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for TaskReports.
        /// </summary>
        /// <returns>The <see cref="IWorkflowTaskReportsCollectionRequestBuilder"/>.</returns>
        public IWorkflowTaskReportsCollectionRequestBuilder TaskReports
        {
            get
            {
                return new WorkflowTaskReportsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("taskReports"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for UserProcessingResults.
        /// </summary>
        /// <returns>The <see cref="IWorkflowUserProcessingResultsCollectionRequestBuilder"/>.</returns>
        public IWorkflowUserProcessingResultsCollectionRequestBuilder UserProcessingResults
        {
            get
            {
                return new WorkflowUserProcessingResultsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("userProcessingResults"), this.Client);
            }
        }

        /// <summary>
        /// Gets the request builder for Versions.
        /// </summary>
        /// <returns>The <see cref="IWorkflowVersionsCollectionRequestBuilder"/>.</returns>
        public IWorkflowVersionsCollectionRequestBuilder Versions
        {
            get
            {
                return new WorkflowVersionsCollectionRequestBuilder(this.AppendSegmentToRequestUrl("versions"), this.Client);
            }
        }
    
        /// <summary>
        /// Gets the request builder for WorkflowActivate.
        /// </summary>
        /// <returns>The <see cref="IWorkflowActivateRequestBuilder"/>.</returns>
        public IWorkflowActivateRequestBuilder Activate(
            IEnumerable<Microsoft.Graph.User> subjects = null)
        {
            return new WorkflowActivateRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.identityGovernance.activate"),
                this.Client,
                subjects);
        }

        /// <summary>
        /// Gets the request builder for WorkflowCreateNewVersion.
        /// </summary>
        /// <returns>The <see cref="IWorkflowCreateNewVersionRequestBuilder"/>.</returns>
        public IWorkflowCreateNewVersionRequestBuilder CreateNewVersion(
            Workflow workflow = null)
        {
            return new WorkflowCreateNewVersionRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.identityGovernance.createNewVersion"),
                this.Client,
                workflow);
        }

        /// <summary>
        /// Gets the request builder for WorkflowRestore.
        /// </summary>
        /// <returns>The <see cref="IWorkflowRestoreRequestBuilder"/>.</returns>
        public IWorkflowRestoreRequestBuilder Restore()
        {
            return new WorkflowRestoreRequestBuilder(
                this.AppendSegmentToRequestUrl("microsoft.graph.identityGovernance.restore"),
                this.Client);
        }
    
    }
}
