// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph.IdentityGovernanceNamespace
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface ITaskReportRequest.
    /// </summary>
    public partial interface ITaskReportRequest : Microsoft.Graph.IBaseRequest
    {
        /// <summary>
        /// Creates the specified TaskReport using POST.
        /// </summary>
        /// <param name="taskReportToCreate">The TaskReport to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created TaskReport.</returns>
        System.Threading.Tasks.Task<TaskReport> CreateAsync(TaskReport taskReportToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified TaskReport using POST and returns a <see cref="GraphResponse{TaskReport}"/> object.
        /// </summary>
        /// <param name="taskReportToCreate">The TaskReport to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{TaskReport}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<TaskReport>> CreateResponseAsync(TaskReport taskReportToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified TaskReport.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified TaskReport and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified TaskReport.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The TaskReport.</returns>
        System.Threading.Tasks.Task<TaskReport> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified TaskReport and returns a <see cref="GraphResponse{TaskReport}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{TaskReport}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<TaskReport>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified TaskReport using PATCH.
        /// </summary>
        /// <param name="taskReportToUpdate">The TaskReport to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated TaskReport.</returns>
        System.Threading.Tasks.Task<TaskReport> UpdateAsync(TaskReport taskReportToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified TaskReport using PATCH and returns a <see cref="GraphResponse{TaskReport}"/> object.
        /// </summary>
        /// <param name="taskReportToUpdate">The TaskReport to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{TaskReport}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<TaskReport>> UpdateResponseAsync(TaskReport taskReportToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified TaskReport using PUT.
        /// </summary>
        /// <param name="taskReportToUpdate">The TaskReport object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<TaskReport> PutAsync(TaskReport taskReportToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified TaskReport using PUT and returns a <see cref="GraphResponse{TaskReport}"/> object.
        /// </summary>
        /// <param name="taskReportToUpdate">The TaskReport object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{TaskReport}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<TaskReport>> PutResponseAsync(TaskReport taskReportToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        ITaskReportRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        ITaskReportRequest Expand(Expression<Func<TaskReport, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        ITaskReportRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        ITaskReportRequest Select(Expression<Func<TaskReport, object>> selectExpression);

    }
}
