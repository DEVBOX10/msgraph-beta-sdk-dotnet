// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityType.cs.tt

namespace Microsoft.Graph.IdentityGovernanceNamespace
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.Json.Serialization;

    /// <summary>
    /// The type Task.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Graph.DerivedTypeConverter<TaskObject>))]
    public partial class TaskObject : Microsoft.Graph.Entity
    {
    
        /// <summary>
        /// Gets or sets arguments.
        /// Arguments included within the task.  For guidance to configure this property, see Configure the arguments for built-in Lifecycle Workflow tasks. Required.
        /// </summary>
        [JsonPropertyName("arguments")]
        public IEnumerable<Microsoft.Graph.KeyValuePair> Arguments { get; set; }
    
        /// <summary>
        /// Gets or sets category.
        /// The category of the task. The possible values are: joiner, leaver, unknownFutureValue. This property is multi-valued and the same task can apply to both joiner and leaver categories.Supports $filter(eq, ne).
        /// </summary>
        [JsonPropertyName("category")]
        public LifecycleTaskCategory? Category { get; set; }
    
        /// <summary>
        /// Gets or sets continue on error.
        /// A boolean value that determines if the failure of this task stops the subsequent workflows from running. Optional.
        /// </summary>
        [JsonPropertyName("continueOnError")]
        public bool? ContinueOnError { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// A string that describes the purpose of the task for administrative use. Optional.
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets display name.
        /// A unique string that identifies the task. Required.Supports $filter(eq, ne) and orderBy.
        /// </summary>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets execution sequence.
        /// An integer that states in what order the task will run in a workflow.Supports $orderby.
        /// </summary>
        [JsonPropertyName("executionSequence")]
        public Int32? ExecutionSequence { get; set; }
    
        /// <summary>
        /// Gets or sets is enabled.
        /// A boolean value that denotes whether the task is set to run or not. Optional.Supports $filter(eq, ne) and orderBy.
        /// </summary>
        [JsonPropertyName("isEnabled")]
        public bool? IsEnabled { get; set; }
    
        /// <summary>
        /// Gets or sets task definition id.
        /// A unique template identifier for the task. For more information about the tasks that Lifecycle Workflows currently supports and their unique identifiers, see supported tasks. Required.Supports $filter(eq, ne).
        /// </summary>
        [JsonPropertyName("taskDefinitionId")]
        public string TaskDefinitionId { get; set; }
    
        /// <summary>
        /// Gets or sets task processing results.
        /// The result of processing the task.
        /// </summary>
        [JsonPropertyName("taskProcessingResults")]
        public ITaskTaskProcessingResultsCollectionPage TaskProcessingResults { get; set; }

        /// <summary>
        /// Gets or sets taskProcessingResultsNextLink.
        /// </summary>
        [JsonPropertyName("taskProcessingResults@odata.nextLink")]
        [JsonConverter(typeof(NextLinkConverter))]
        public string TaskProcessingResultsNextLink { get; set; }
    
    }
}

