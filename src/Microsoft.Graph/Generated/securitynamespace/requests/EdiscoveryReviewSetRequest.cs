// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph.SecurityNamespace
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type EdiscoveryReviewSetRequest.
    /// </summary>
    public partial class EdiscoveryReviewSetRequest : Microsoft.Graph.BaseRequest, IEdiscoveryReviewSetRequest
    {
        /// <summary>
        /// Constructs a new EdiscoveryReviewSetRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="Microsoft.Graph.IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public EdiscoveryReviewSetRequest(
            string requestUrl,
            Microsoft.Graph.IBaseClient client,
            IEnumerable<Microsoft.Graph.Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified EdiscoveryReviewSet using POST.
        /// </summary>
        /// <param name="ediscoveryReviewSetToCreate">The EdiscoveryReviewSet to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created EdiscoveryReviewSet.</returns>
        public async System.Threading.Tasks.Task<EdiscoveryReviewSet> CreateAsync(EdiscoveryReviewSet ediscoveryReviewSetToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            var newEntity = await this.SendAsync<EdiscoveryReviewSet>(ediscoveryReviewSetToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Creates the specified EdiscoveryReviewSet using POST and returns a <see cref="GraphResponse{EdiscoveryReviewSet}"/> object.
        /// </summary>
        /// <param name="ediscoveryReviewSetToCreate">The EdiscoveryReviewSet to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{EdiscoveryReviewSet}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<EdiscoveryReviewSet>> CreateResponseAsync(EdiscoveryReviewSet ediscoveryReviewSetToCreate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            return this.SendAsyncWithGraphResponse<EdiscoveryReviewSet>(ediscoveryReviewSetToCreate, cancellationToken);
        }

        /// <summary>
        /// Deletes the specified EdiscoveryReviewSet.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            await this.SendAsync<EdiscoveryReviewSet>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes the specified EdiscoveryReviewSet and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        public System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.DELETE;
            return this.SendAsyncWithGraphResponse(null, cancellationToken);
        }

        /// <summary>
        /// Gets the specified EdiscoveryReviewSet.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The EdiscoveryReviewSet.</returns>
        public async System.Threading.Tasks.Task<EdiscoveryReviewSet> GetAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            var retrievedEntity = await this.SendAsync<EdiscoveryReviewSet>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Gets the specified EdiscoveryReviewSet and returns a <see cref="GraphResponse{EdiscoveryReviewSet}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{EdiscoveryReviewSet}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<EdiscoveryReviewSet>> GetResponseAsync(CancellationToken cancellationToken = default)
        {
            this.Method = HttpMethods.GET;
            return this.SendAsyncWithGraphResponse<EdiscoveryReviewSet>(null, cancellationToken);
        }

        /// <summary>
        /// Updates the specified EdiscoveryReviewSet using PATCH.
        /// </summary>
        /// <param name="ediscoveryReviewSetToUpdate">The EdiscoveryReviewSet to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated EdiscoveryReviewSet.</returns>
        public async System.Threading.Tasks.Task<EdiscoveryReviewSet> UpdateAsync(EdiscoveryReviewSet ediscoveryReviewSetToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            var updatedEntity = await this.SendAsync<EdiscoveryReviewSet>(ediscoveryReviewSetToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified EdiscoveryReviewSet using PATCH and returns a <see cref="GraphResponse{EdiscoveryReviewSet}"/> object.
        /// </summary>
        /// <param name="ediscoveryReviewSetToUpdate">The EdiscoveryReviewSet to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{EdiscoveryReviewSet}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<EdiscoveryReviewSet>> UpdateResponseAsync(EdiscoveryReviewSet ediscoveryReviewSetToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            return this.SendAsyncWithGraphResponse<EdiscoveryReviewSet>(ediscoveryReviewSetToUpdate, cancellationToken);
        }

        /// <summary>
        /// Updates the specified EdiscoveryReviewSet using PUT.
        /// </summary>
        /// <param name="ediscoveryReviewSetToUpdate">The EdiscoveryReviewSet object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task<EdiscoveryReviewSet> PutAsync(EdiscoveryReviewSet ediscoveryReviewSetToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            var updatedEntity = await this.SendAsync<EdiscoveryReviewSet>(ediscoveryReviewSetToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified EdiscoveryReviewSet using PUT and returns a <see cref="GraphResponse{EdiscoveryReviewSet}"/> object.
        /// </summary>
        /// <param name="ediscoveryReviewSetToUpdate">The EdiscoveryReviewSet object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await of <see cref="GraphResponse{EdiscoveryReviewSet}"/>.</returns>
        public System.Threading.Tasks.Task<GraphResponse<EdiscoveryReviewSet>> PutResponseAsync(EdiscoveryReviewSet ediscoveryReviewSetToUpdate, CancellationToken cancellationToken = default)
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            return this.SendAsyncWithGraphResponse<EdiscoveryReviewSet>(ediscoveryReviewSetToUpdate, cancellationToken);
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IEdiscoveryReviewSetRequest Expand(string value)
        {
            this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public IEdiscoveryReviewSetRequest Expand(Expression<Func<EdiscoveryReviewSet, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = Microsoft.Graph.ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IEdiscoveryReviewSetRequest Select(string value)
        {
            this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public IEdiscoveryReviewSetRequest Select(Expression<Func<EdiscoveryReviewSet, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = Microsoft.Graph.ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new Microsoft.Graph.QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="ediscoveryReviewSetToInitialize">The <see cref="EdiscoveryReviewSet"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(EdiscoveryReviewSet ediscoveryReviewSetToInitialize)
        {

            if (ediscoveryReviewSetToInitialize != null)
            {
                if (ediscoveryReviewSetToInitialize.Files != null && ediscoveryReviewSetToInitialize.Files.CurrentPage != null)
                {
                    ediscoveryReviewSetToInitialize.Files.InitializeNextPageRequest(this.Client, ediscoveryReviewSetToInitialize.FilesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    ediscoveryReviewSetToInitialize.Files.AdditionalData = ediscoveryReviewSetToInitialize.AdditionalData;
                }
                if (ediscoveryReviewSetToInitialize.Queries != null && ediscoveryReviewSetToInitialize.Queries.CurrentPage != null)
                {
                    ediscoveryReviewSetToInitialize.Queries.InitializeNextPageRequest(this.Client, ediscoveryReviewSetToInitialize.QueriesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    ediscoveryReviewSetToInitialize.Queries.AdditionalData = ediscoveryReviewSetToInitialize.AdditionalData;
                }

            }


        }
    }
}
