// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph.SecurityNamespace
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IEdiscoveryTagOperationRequest.
    /// </summary>
    public partial interface IEdiscoveryTagOperationRequest : Microsoft.Graph.IBaseRequest
    {
        /// <summary>
        /// Creates the specified EdiscoveryTagOperation using POST.
        /// </summary>
        /// <param name="ediscoveryTagOperationToCreate">The EdiscoveryTagOperation to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created EdiscoveryTagOperation.</returns>
        System.Threading.Tasks.Task<EdiscoveryTagOperation> CreateAsync(EdiscoveryTagOperation ediscoveryTagOperationToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified EdiscoveryTagOperation using POST and returns a <see cref="GraphResponse{EdiscoveryTagOperation}"/> object.
        /// </summary>
        /// <param name="ediscoveryTagOperationToCreate">The EdiscoveryTagOperation to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{EdiscoveryTagOperation}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<EdiscoveryTagOperation>> CreateResponseAsync(EdiscoveryTagOperation ediscoveryTagOperationToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified EdiscoveryTagOperation.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified EdiscoveryTagOperation and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified EdiscoveryTagOperation.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The EdiscoveryTagOperation.</returns>
        System.Threading.Tasks.Task<EdiscoveryTagOperation> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified EdiscoveryTagOperation and returns a <see cref="GraphResponse{EdiscoveryTagOperation}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{EdiscoveryTagOperation}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<EdiscoveryTagOperation>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified EdiscoveryTagOperation using PATCH.
        /// </summary>
        /// <param name="ediscoveryTagOperationToUpdate">The EdiscoveryTagOperation to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated EdiscoveryTagOperation.</returns>
        System.Threading.Tasks.Task<EdiscoveryTagOperation> UpdateAsync(EdiscoveryTagOperation ediscoveryTagOperationToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified EdiscoveryTagOperation using PATCH and returns a <see cref="GraphResponse{EdiscoveryTagOperation}"/> object.
        /// </summary>
        /// <param name="ediscoveryTagOperationToUpdate">The EdiscoveryTagOperation to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{EdiscoveryTagOperation}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<EdiscoveryTagOperation>> UpdateResponseAsync(EdiscoveryTagOperation ediscoveryTagOperationToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified EdiscoveryTagOperation using PUT.
        /// </summary>
        /// <param name="ediscoveryTagOperationToUpdate">The EdiscoveryTagOperation object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<EdiscoveryTagOperation> PutAsync(EdiscoveryTagOperation ediscoveryTagOperationToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified EdiscoveryTagOperation using PUT and returns a <see cref="GraphResponse{EdiscoveryTagOperation}"/> object.
        /// </summary>
        /// <param name="ediscoveryTagOperationToUpdate">The EdiscoveryTagOperation object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{EdiscoveryTagOperation}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<EdiscoveryTagOperation>> PutResponseAsync(EdiscoveryTagOperation ediscoveryTagOperationToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IEdiscoveryTagOperationRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IEdiscoveryTagOperationRequest Expand(Expression<Func<EdiscoveryTagOperation, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IEdiscoveryTagOperationRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IEdiscoveryTagOperationRequest Select(Expression<Func<EdiscoveryTagOperation, object>> selectExpression);

    }
}
