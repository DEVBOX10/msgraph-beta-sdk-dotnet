// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityWithReferenceRequest.cs.tt

namespace Microsoft.Graph.SecurityNamespace
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IRetentionEventTypeWithReferenceRequest.
    /// </summary>
    public partial interface IRetentionEventTypeWithReferenceRequest : Microsoft.Graph.IBaseRequest
    {
        /// <summary>
        /// Gets the specified RetentionEventType.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The RetentionEventType.</returns>
        System.Threading.Tasks.Task<RetentionEventType> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified RetentionEventType and returns a <see cref="GraphResponse{RetentionEventType}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{RetentionEventType}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<RetentionEventType>> GetResponseAsync(CancellationToken cancellationToken = default);

		/// <summary>
        /// Creates the specified RetentionEventType using POST.
        /// </summary>
        /// <param name="retentionEventTypeToCreate">The RetentionEventType to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created RetentionEventType.</returns>
        System.Threading.Tasks.Task<RetentionEventType> CreateAsync(RetentionEventType retentionEventTypeToCreate, CancellationToken cancellationToken = default);

		/// <summary>
        /// Creates the specified RetentionEventType using POST and returns a <see cref="GraphResponse{RetentionEventType}"/> object.
        /// </summary>
        /// <param name="retentionEventTypeToCreate">The RetentionEventType to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{RetentionEventType}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<RetentionEventType>> CreateResponseAsync(RetentionEventType retentionEventTypeToCreate, CancellationToken cancellationToken = default);

		/// <summary>
        /// Updates the specified RetentionEventType using PATCH.
        /// </summary>
        /// <param name="retentionEventTypeToUpdate">The RetentionEventType to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated RetentionEventType.</returns>
        System.Threading.Tasks.Task<RetentionEventType> UpdateAsync(RetentionEventType retentionEventTypeToUpdate, CancellationToken cancellationToken = default);

		/// <summary>
        /// Updates the specified RetentionEventType using PATCH and returns a <see cref="GraphResponse{RetentionEventType}"/> object.
        /// </summary>
        /// <param name="retentionEventTypeToUpdate">The RetentionEventType to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="Microsoft.Graph.ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{RetentionEventType}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<RetentionEventType>> UpdateResponseAsync(RetentionEventType retentionEventTypeToUpdate, CancellationToken cancellationToken = default);

		/// <summary>
        /// Deletes the specified RetentionEventType.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

		/// <summary>
        /// Deletes the specified RetentionEventType and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IRetentionEventTypeWithReferenceRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IRetentionEventTypeWithReferenceRequest Expand(Expression<Func<RetentionEventType, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IRetentionEventTypeWithReferenceRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IRetentionEventTypeWithReferenceRequest Select(Expression<Func<RetentionEventType, object>> selectExpression);

    }
}
