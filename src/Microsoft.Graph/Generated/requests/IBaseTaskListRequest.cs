// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IBaseTaskListRequest.
    /// </summary>
    public partial interface IBaseTaskListRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified BaseTaskList using POST.
        /// </summary>
        /// <param name="baseTaskListToCreate">The BaseTaskList to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created BaseTaskList.</returns>
        System.Threading.Tasks.Task<BaseTaskList> CreateAsync(BaseTaskList baseTaskListToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified BaseTaskList using POST and returns a <see cref="GraphResponse{BaseTaskList}"/> object.
        /// </summary>
        /// <param name="baseTaskListToCreate">The BaseTaskList to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{BaseTaskList}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<BaseTaskList>> CreateResponseAsync(BaseTaskList baseTaskListToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified BaseTaskList.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified BaseTaskList and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified BaseTaskList.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The BaseTaskList.</returns>
        System.Threading.Tasks.Task<BaseTaskList> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified BaseTaskList and returns a <see cref="GraphResponse{BaseTaskList}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{BaseTaskList}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<BaseTaskList>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified BaseTaskList using PATCH.
        /// </summary>
        /// <param name="baseTaskListToUpdate">The BaseTaskList to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated BaseTaskList.</returns>
        System.Threading.Tasks.Task<BaseTaskList> UpdateAsync(BaseTaskList baseTaskListToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified BaseTaskList using PATCH and returns a <see cref="GraphResponse{BaseTaskList}"/> object.
        /// </summary>
        /// <param name="baseTaskListToUpdate">The BaseTaskList to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{BaseTaskList}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<BaseTaskList>> UpdateResponseAsync(BaseTaskList baseTaskListToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified BaseTaskList using PUT.
        /// </summary>
        /// <param name="baseTaskListToUpdate">The BaseTaskList object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<BaseTaskList> PutAsync(BaseTaskList baseTaskListToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified BaseTaskList using PUT and returns a <see cref="GraphResponse{BaseTaskList}"/> object.
        /// </summary>
        /// <param name="baseTaskListToUpdate">The BaseTaskList object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{BaseTaskList}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<BaseTaskList>> PutResponseAsync(BaseTaskList baseTaskListToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IBaseTaskListRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IBaseTaskListRequest Expand(Expression<Func<BaseTaskList, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IBaseTaskListRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IBaseTaskListRequest Select(Expression<Func<BaseTaskList, object>> selectExpression);

    }
}
