// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: EntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The type CompanyRequest.
    /// </summary>
    public partial class CompanyRequest : BaseRequest, ICompanyRequest
    {
        /// <summary>
        /// Constructs a new CompanyRequest.
        /// </summary>
        /// <param name="requestUrl">The URL for the built request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query and header option name value pairs for the request.</param>
        public CompanyRequest(
            string requestUrl,
            IBaseClient client,
            IEnumerable<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified Company using POST.
        /// </summary>
        /// <param name="companyToCreate">The Company to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created Company.</returns>
        public async System.Threading.Tasks.Task<Company> CreateAsync(Company companyToCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            var newEntity = await this.SendAsync<Company>(companyToCreate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(newEntity);
            return newEntity;
        }

        /// <summary>
        /// Creates the specified Company using POST and returns a <see cref="GraphResponse{Company}"/> object.
        /// </summary>
        /// <param name="companyToCreate">The Company to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{Company}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Company>> CreateResponseAsync(Company companyToCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.POST;
            return this.SendAsyncWithGraphResponse<Company>(companyToCreate, cancellationToken);
        }

        /// <summary>
        /// Deletes the specified Company.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.Method = HttpMethods.DELETE;
            await this.SendAsync<Company>(null, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes the specified Company and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        public System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.Method = HttpMethods.DELETE;
            return this.SendAsyncWithGraphResponse(null, cancellationToken);
        }

        /// <summary>
        /// Gets the specified Company.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The Company.</returns>
        public async System.Threading.Tasks.Task<Company> GetAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.Method = HttpMethods.GET;
            var retrievedEntity = await this.SendAsync<Company>(null, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(retrievedEntity);
            return retrievedEntity;
        }

        /// <summary>
        /// Gets the specified Company and returns a <see cref="GraphResponse{Company}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{Company}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Company>> GetResponseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            this.Method = HttpMethods.GET;
            return this.SendAsyncWithGraphResponse<Company>(null, cancellationToken);
        }

        /// <summary>
        /// Updates the specified Company using PATCH.
        /// </summary>
        /// <param name="companyToUpdate">The Company to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated Company.</returns>
        public async System.Threading.Tasks.Task<Company> UpdateAsync(Company companyToUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            var updatedEntity = await this.SendAsync<Company>(companyToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified Company using PATCH and returns a <see cref="GraphResponse{Company}"/> object.
        /// </summary>
        /// <param name="companyToUpdate">The Company to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{Company}"/> object of the request.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Company>> UpdateResponseAsync(Company companyToUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PATCH;
            return this.SendAsyncWithGraphResponse<Company>(companyToUpdate, cancellationToken);
        }

        /// <summary>
        /// Updates the specified Company using PUT.
        /// </summary>
        /// <param name="companyToUpdate">The Company object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        public async System.Threading.Tasks.Task<Company> PutAsync(Company companyToUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            var updatedEntity = await this.SendAsync<Company>(companyToUpdate, cancellationToken).ConfigureAwait(false);
            this.InitializeCollectionProperties(updatedEntity);
            return updatedEntity;
        }

        /// <summary>
        /// Updates the specified Company using PUT and returns a <see cref="GraphResponse{Company}"/> object.
        /// </summary>
        /// <param name="companyToUpdate">The Company object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await of <see cref="GraphResponse{Company}"/>.</returns>
        public System.Threading.Tasks.Task<GraphResponse<Company>> PutResponseAsync(Company companyToUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            this.ContentType = CoreConstants.MimeTypeNames.Application.Json;
            this.Method = HttpMethods.PUT;
            return this.SendAsyncWithGraphResponse<Company>(companyToUpdate, cancellationToken);
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public ICompanyRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        public ICompanyRequest Expand(Expression<Func<Company, object>> expandExpression)
        {
		    if (expandExpression == null)
            {
                throw new ArgumentNullException(nameof(expandExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(expandExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(expandExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$expand", value));
            }
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public ICompanyRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        public ICompanyRequest Select(Expression<Func<Company, object>> selectExpression)
        {
            if (selectExpression == null)
            {
                throw new ArgumentNullException(nameof(selectExpression));
            }
            string error;
            string value = ExpressionExtractHelper.ExtractMembers(selectExpression, out error);
            if (value == null)
            {
                throw new ArgumentException(error, nameof(selectExpression));
            }
            else
            {
                this.QueryOptions.Add(new QueryOption("$select", value));
            }
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="companyToInitialize">The <see cref="Company"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Company companyToInitialize)
        {

            if (companyToInitialize != null)
            {
                if (companyToInitialize.Accounts != null && companyToInitialize.Accounts.CurrentPage != null)
                {
                    companyToInitialize.Accounts.InitializeNextPageRequest(this.Client, companyToInitialize.AccountsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Accounts.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.AgedAccountsPayable != null && companyToInitialize.AgedAccountsPayable.CurrentPage != null)
                {
                    companyToInitialize.AgedAccountsPayable.InitializeNextPageRequest(this.Client, companyToInitialize.AgedAccountsPayableNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.AgedAccountsPayable.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.AgedAccountsReceivable != null && companyToInitialize.AgedAccountsReceivable.CurrentPage != null)
                {
                    companyToInitialize.AgedAccountsReceivable.InitializeNextPageRequest(this.Client, companyToInitialize.AgedAccountsReceivableNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.AgedAccountsReceivable.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.CompanyInformation != null && companyToInitialize.CompanyInformation.CurrentPage != null)
                {
                    companyToInitialize.CompanyInformation.InitializeNextPageRequest(this.Client, companyToInitialize.CompanyInformationNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.CompanyInformation.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.CountriesRegions != null && companyToInitialize.CountriesRegions.CurrentPage != null)
                {
                    companyToInitialize.CountriesRegions.InitializeNextPageRequest(this.Client, companyToInitialize.CountriesRegionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.CountriesRegions.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Currencies != null && companyToInitialize.Currencies.CurrentPage != null)
                {
                    companyToInitialize.Currencies.InitializeNextPageRequest(this.Client, companyToInitialize.CurrenciesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Currencies.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.CustomerPaymentJournals != null && companyToInitialize.CustomerPaymentJournals.CurrentPage != null)
                {
                    companyToInitialize.CustomerPaymentJournals.InitializeNextPageRequest(this.Client, companyToInitialize.CustomerPaymentJournalsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.CustomerPaymentJournals.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.CustomerPayments != null && companyToInitialize.CustomerPayments.CurrentPage != null)
                {
                    companyToInitialize.CustomerPayments.InitializeNextPageRequest(this.Client, companyToInitialize.CustomerPaymentsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.CustomerPayments.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Customers != null && companyToInitialize.Customers.CurrentPage != null)
                {
                    companyToInitialize.Customers.InitializeNextPageRequest(this.Client, companyToInitialize.CustomersNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Customers.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Dimensions != null && companyToInitialize.Dimensions.CurrentPage != null)
                {
                    companyToInitialize.Dimensions.InitializeNextPageRequest(this.Client, companyToInitialize.DimensionsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Dimensions.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.DimensionValues != null && companyToInitialize.DimensionValues.CurrentPage != null)
                {
                    companyToInitialize.DimensionValues.InitializeNextPageRequest(this.Client, companyToInitialize.DimensionValuesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.DimensionValues.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Employees != null && companyToInitialize.Employees.CurrentPage != null)
                {
                    companyToInitialize.Employees.InitializeNextPageRequest(this.Client, companyToInitialize.EmployeesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Employees.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.GeneralLedgerEntries != null && companyToInitialize.GeneralLedgerEntries.CurrentPage != null)
                {
                    companyToInitialize.GeneralLedgerEntries.InitializeNextPageRequest(this.Client, companyToInitialize.GeneralLedgerEntriesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.GeneralLedgerEntries.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.ItemCategories != null && companyToInitialize.ItemCategories.CurrentPage != null)
                {
                    companyToInitialize.ItemCategories.InitializeNextPageRequest(this.Client, companyToInitialize.ItemCategoriesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.ItemCategories.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Items != null && companyToInitialize.Items.CurrentPage != null)
                {
                    companyToInitialize.Items.InitializeNextPageRequest(this.Client, companyToInitialize.ItemsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Items.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.JournalLines != null && companyToInitialize.JournalLines.CurrentPage != null)
                {
                    companyToInitialize.JournalLines.InitializeNextPageRequest(this.Client, companyToInitialize.JournalLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.JournalLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Journals != null && companyToInitialize.Journals.CurrentPage != null)
                {
                    companyToInitialize.Journals.InitializeNextPageRequest(this.Client, companyToInitialize.JournalsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Journals.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.PaymentMethods != null && companyToInitialize.PaymentMethods.CurrentPage != null)
                {
                    companyToInitialize.PaymentMethods.InitializeNextPageRequest(this.Client, companyToInitialize.PaymentMethodsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.PaymentMethods.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.PaymentTerms != null && companyToInitialize.PaymentTerms.CurrentPage != null)
                {
                    companyToInitialize.PaymentTerms.InitializeNextPageRequest(this.Client, companyToInitialize.PaymentTermsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.PaymentTerms.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Picture != null && companyToInitialize.Picture.CurrentPage != null)
                {
                    companyToInitialize.Picture.InitializeNextPageRequest(this.Client, companyToInitialize.PictureNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Picture.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.PurchaseInvoiceLines != null && companyToInitialize.PurchaseInvoiceLines.CurrentPage != null)
                {
                    companyToInitialize.PurchaseInvoiceLines.InitializeNextPageRequest(this.Client, companyToInitialize.PurchaseInvoiceLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.PurchaseInvoiceLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.PurchaseInvoices != null && companyToInitialize.PurchaseInvoices.CurrentPage != null)
                {
                    companyToInitialize.PurchaseInvoices.InitializeNextPageRequest(this.Client, companyToInitialize.PurchaseInvoicesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.PurchaseInvoices.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesCreditMemoLines != null && companyToInitialize.SalesCreditMemoLines.CurrentPage != null)
                {
                    companyToInitialize.SalesCreditMemoLines.InitializeNextPageRequest(this.Client, companyToInitialize.SalesCreditMemoLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesCreditMemoLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesCreditMemos != null && companyToInitialize.SalesCreditMemos.CurrentPage != null)
                {
                    companyToInitialize.SalesCreditMemos.InitializeNextPageRequest(this.Client, companyToInitialize.SalesCreditMemosNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesCreditMemos.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesInvoiceLines != null && companyToInitialize.SalesInvoiceLines.CurrentPage != null)
                {
                    companyToInitialize.SalesInvoiceLines.InitializeNextPageRequest(this.Client, companyToInitialize.SalesInvoiceLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesInvoiceLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesInvoices != null && companyToInitialize.SalesInvoices.CurrentPage != null)
                {
                    companyToInitialize.SalesInvoices.InitializeNextPageRequest(this.Client, companyToInitialize.SalesInvoicesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesInvoices.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesOrderLines != null && companyToInitialize.SalesOrderLines.CurrentPage != null)
                {
                    companyToInitialize.SalesOrderLines.InitializeNextPageRequest(this.Client, companyToInitialize.SalesOrderLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesOrderLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesOrders != null && companyToInitialize.SalesOrders.CurrentPage != null)
                {
                    companyToInitialize.SalesOrders.InitializeNextPageRequest(this.Client, companyToInitialize.SalesOrdersNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesOrders.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesQuoteLines != null && companyToInitialize.SalesQuoteLines.CurrentPage != null)
                {
                    companyToInitialize.SalesQuoteLines.InitializeNextPageRequest(this.Client, companyToInitialize.SalesQuoteLinesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesQuoteLines.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.SalesQuotes != null && companyToInitialize.SalesQuotes.CurrentPage != null)
                {
                    companyToInitialize.SalesQuotes.InitializeNextPageRequest(this.Client, companyToInitialize.SalesQuotesNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.SalesQuotes.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.ShipmentMethods != null && companyToInitialize.ShipmentMethods.CurrentPage != null)
                {
                    companyToInitialize.ShipmentMethods.InitializeNextPageRequest(this.Client, companyToInitialize.ShipmentMethodsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.ShipmentMethods.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.TaxAreas != null && companyToInitialize.TaxAreas.CurrentPage != null)
                {
                    companyToInitialize.TaxAreas.InitializeNextPageRequest(this.Client, companyToInitialize.TaxAreasNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.TaxAreas.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.TaxGroups != null && companyToInitialize.TaxGroups.CurrentPage != null)
                {
                    companyToInitialize.TaxGroups.InitializeNextPageRequest(this.Client, companyToInitialize.TaxGroupsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.TaxGroups.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.UnitsOfMeasure != null && companyToInitialize.UnitsOfMeasure.CurrentPage != null)
                {
                    companyToInitialize.UnitsOfMeasure.InitializeNextPageRequest(this.Client, companyToInitialize.UnitsOfMeasureNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.UnitsOfMeasure.AdditionalData = companyToInitialize.AdditionalData;
                }
                if (companyToInitialize.Vendors != null && companyToInitialize.Vendors.CurrentPage != null)
                {
                    companyToInitialize.Vendors.InitializeNextPageRequest(this.Client, companyToInitialize.VendorsNextLink);
                    // Copy the additional data collection to the page itself so that information is not lost
                    companyToInitialize.Vendors.AdditionalData = companyToInitialize.AdditionalData;
                }

            }


        }
    }
}
