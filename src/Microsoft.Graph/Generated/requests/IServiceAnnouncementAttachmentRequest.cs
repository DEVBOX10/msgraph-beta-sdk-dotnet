// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
// <auto-generated/>

// Template Source: IEntityRequest.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.IO;
    using System.Net.Http;
    using System.Threading;
    using System.Linq.Expressions;

    /// <summary>
    /// The interface IServiceAnnouncementAttachmentRequest.
    /// </summary>
    public partial interface IServiceAnnouncementAttachmentRequest : IBaseRequest
    {
        /// <summary>
        /// Creates the specified ServiceAnnouncementAttachment using POST.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToCreate">The ServiceAnnouncementAttachment to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The created ServiceAnnouncementAttachment.</returns>
        System.Threading.Tasks.Task<ServiceAnnouncementAttachment> CreateAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates the specified ServiceAnnouncementAttachment using POST and returns a <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToCreate">The ServiceAnnouncementAttachment to create.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<ServiceAnnouncementAttachment>> CreateResponseAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToCreate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified ServiceAnnouncementAttachment.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task DeleteAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes the specified ServiceAnnouncementAttachment and returns a <see cref="GraphResponse"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse> DeleteResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified ServiceAnnouncementAttachment.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The ServiceAnnouncementAttachment.</returns>
        System.Threading.Tasks.Task<ServiceAnnouncementAttachment> GetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specified ServiceAnnouncementAttachment and returns a <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object.
        /// </summary>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<ServiceAnnouncementAttachment>> GetResponseAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified ServiceAnnouncementAttachment using PATCH.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToUpdate">The ServiceAnnouncementAttachment to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The updated ServiceAnnouncementAttachment.</returns>
        System.Threading.Tasks.Task<ServiceAnnouncementAttachment> UpdateAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified ServiceAnnouncementAttachment using PATCH and returns a <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToUpdate">The ServiceAnnouncementAttachment to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <exception cref="ClientException">Thrown when an object returned in a response is used for updating an object in Microsoft Graph.</exception>
        /// <returns>The <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object of the request.</returns>
        System.Threading.Tasks.Task<GraphResponse<ServiceAnnouncementAttachment>> UpdateResponseAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified ServiceAnnouncementAttachment using PUT.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToUpdate">The ServiceAnnouncementAttachment object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task to await.</returns>
        System.Threading.Tasks.Task<ServiceAnnouncementAttachment> PutAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the specified ServiceAnnouncementAttachment using PUT and returns a <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> object.
        /// </summary>
        /// <param name="serviceAnnouncementAttachmentToUpdate">The ServiceAnnouncementAttachment object to update.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> for the request.</param>
        /// <returns>The task of <see cref="GraphResponse{ServiceAnnouncementAttachment}"/> to await.</returns>
        System.Threading.Tasks.Task<GraphResponse<ServiceAnnouncementAttachment>> PutResponseAsync(ServiceAnnouncementAttachment serviceAnnouncementAttachmentToUpdate, CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        IServiceAnnouncementAttachmentRequest Expand(string value);

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="expandExpression">The expression from which to calculate the expand value.</param>
        /// <returns>The request object to send.</returns>
        IServiceAnnouncementAttachmentRequest Expand(Expression<Func<ServiceAnnouncementAttachment, object>> expandExpression);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        IServiceAnnouncementAttachmentRequest Select(string value);

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="selectExpression">The expression from which to calculate the select value.</param>
        /// <returns>The request object to send.</returns>
        IServiceAnnouncementAttachmentRequest Select(Expression<Func<ServiceAnnouncementAttachment, object>> selectExpression);

    }
}
