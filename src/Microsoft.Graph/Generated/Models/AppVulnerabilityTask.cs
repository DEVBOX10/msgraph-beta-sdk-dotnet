using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models {
    public class AppVulnerabilityTask : DeviceAppManagementTask, IParsable {
        /// <summary>The app name.</summary>
        public string AppName {
            get { return BackingStore?.Get<string>(nameof(AppName)); }
            set { BackingStore?.Set(nameof(AppName), value); }
        }
        /// <summary>The app publisher.</summary>
        public string AppPublisher {
            get { return BackingStore?.Get<string>(nameof(AppPublisher)); }
            set { BackingStore?.Set(nameof(AppPublisher), value); }
        }
        /// <summary>The app version.</summary>
        public string AppVersion {
            get { return BackingStore?.Get<string>(nameof(AppVersion)); }
            set { BackingStore?.Set(nameof(AppVersion), value); }
        }
        /// <summary>Information about the mitigation.</summary>
        public string Insights {
            get { return BackingStore?.Get<string>(nameof(Insights)); }
            set { BackingStore?.Set(nameof(Insights), value); }
        }
        /// <summary>The number of vulnerable devices.</summary>
        public int? ManagedDeviceCount {
            get { return BackingStore?.Get<int?>(nameof(ManagedDeviceCount)); }
            set { BackingStore?.Set(nameof(ManagedDeviceCount), value); }
        }
        /// <summary>The vulnerable managed devices.</summary>
        public List<AppVulnerabilityManagedDevice> ManagedDevices {
            get { return BackingStore?.Get<List<AppVulnerabilityManagedDevice>>(nameof(ManagedDevices)); }
            set { BackingStore?.Set(nameof(ManagedDevices), value); }
        }
        /// <summary>The mitigation type. Possible values are: unknown, update, uninstall, securityConfiguration.</summary>
        public AppVulnerabilityTaskMitigationType? MitigationType {
            get { return BackingStore?.Get<AppVulnerabilityTaskMitigationType?>(nameof(MitigationType)); }
            set { BackingStore?.Set(nameof(MitigationType), value); }
        }
        /// <summary>The number of vulnerable mobile apps.</summary>
        public int? MobileAppCount {
            get { return BackingStore?.Get<int?>(nameof(MobileAppCount)); }
            set { BackingStore?.Set(nameof(MobileAppCount), value); }
        }
        /// <summary>The vulnerable mobile apps.</summary>
        public List<AppVulnerabilityMobileApp> MobileApps {
            get { return BackingStore?.Get<List<AppVulnerabilityMobileApp>>(nameof(MobileApps)); }
            set { BackingStore?.Set(nameof(MobileApps), value); }
        }
        /// <summary>The remediation steps.</summary>
        public string Remediation {
            get { return BackingStore?.Get<string>(nameof(Remediation)); }
            set { BackingStore?.Set(nameof(Remediation), value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new AppVulnerabilityTask CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AppVulnerabilityTask();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"appName", n => { AppName = n.GetStringValue(); } },
                {"appPublisher", n => { AppPublisher = n.GetStringValue(); } },
                {"appVersion", n => { AppVersion = n.GetStringValue(); } },
                {"insights", n => { Insights = n.GetStringValue(); } },
                {"managedDeviceCount", n => { ManagedDeviceCount = n.GetIntValue(); } },
                {"managedDevices", n => { ManagedDevices = n.GetCollectionOfObjectValues<AppVulnerabilityManagedDevice>(AppVulnerabilityManagedDevice.CreateFromDiscriminatorValue).ToList(); } },
                {"mitigationType", n => { MitigationType = n.GetEnumValue<AppVulnerabilityTaskMitigationType>(); } },
                {"mobileAppCount", n => { MobileAppCount = n.GetIntValue(); } },
                {"mobileApps", n => { MobileApps = n.GetCollectionOfObjectValues<AppVulnerabilityMobileApp>(AppVulnerabilityMobileApp.CreateFromDiscriminatorValue).ToList(); } },
                {"remediation", n => { Remediation = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appName", AppName);
            writer.WriteStringValue("appPublisher", AppPublisher);
            writer.WriteStringValue("appVersion", AppVersion);
            writer.WriteStringValue("insights", Insights);
            writer.WriteIntValue("managedDeviceCount", ManagedDeviceCount);
            writer.WriteCollectionOfObjectValues<AppVulnerabilityManagedDevice>("managedDevices", ManagedDevices);
            writer.WriteEnumValue<AppVulnerabilityTaskMitigationType>("mitigationType", MitigationType);
            writer.WriteIntValue("mobileAppCount", MobileAppCount);
            writer.WriteCollectionOfObjectValues<AppVulnerabilityMobileApp>("mobileApps", MobileApps);
            writer.WriteStringValue("remediation", Remediation);
        }
    }
}
