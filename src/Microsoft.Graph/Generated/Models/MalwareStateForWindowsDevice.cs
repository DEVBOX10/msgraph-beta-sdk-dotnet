using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models {
    public class MalwareStateForWindowsDevice : Entity, IParsable {
        /// <summary>Number of times the malware is detected</summary>
        public int? DetectionCount { get; set; }
        /// <summary>Device name</summary>
        public string DeviceName { get; set; }
        /// <summary>Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.</summary>
        public WindowsMalwareExecutionState? ExecutionState { get; set; }
        /// <summary>Initial detection datetime of the malware</summary>
        public DateTimeOffset? InitialDetectionDateTime { get; set; }
        /// <summary>The last time this particular threat was changed</summary>
        public DateTimeOffset? LastStateChangeDateTime { get; set; }
        /// <summary>Threat status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.</summary>
        public WindowsMalwareThreatState? ThreatState { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new MalwareStateForWindowsDevice CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MalwareStateForWindowsDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"detectionCount", n => { DetectionCount = n.GetIntValue(); } },
                {"deviceName", n => { DeviceName = n.GetStringValue(); } },
                {"executionState", n => { ExecutionState = n.GetEnumValue<WindowsMalwareExecutionState>(); } },
                {"initialDetectionDateTime", n => { InitialDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                {"lastStateChangeDateTime", n => { LastStateChangeDateTime = n.GetDateTimeOffsetValue(); } },
                {"threatState", n => { ThreatState = n.GetEnumValue<WindowsMalwareThreatState>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("detectionCount", DetectionCount);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteEnumValue<WindowsMalwareExecutionState>("executionState", ExecutionState);
            writer.WriteDateTimeOffsetValue("initialDetectionDateTime", InitialDetectionDateTime);
            writer.WriteDateTimeOffsetValue("lastStateChangeDateTime", LastStateChangeDateTime);
            writer.WriteEnumValue<WindowsMalwareThreatState>("threatState", ThreatState);
        }
    }
}
