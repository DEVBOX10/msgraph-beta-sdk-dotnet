using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models {
    /// <summary>Windows Autopilot Deployment Profile</summary>
    public class WindowsAutopilotDeploymentProfile : Entity, IParsable {
        /// <summary>The list of assigned devices for the profile.</summary>
        public List<WindowsAutopilotDeviceIdentity> AssignedDevices {
            get { return BackingStore?.Get<List<WindowsAutopilotDeviceIdentity>>(nameof(AssignedDevices)); }
            set { BackingStore?.Set(nameof(AssignedDevices), value); }
        }
        /// <summary>The list of group assignments for the profile.</summary>
        public List<WindowsAutopilotDeploymentProfileAssignment> Assignments {
            get { return BackingStore?.Get<List<WindowsAutopilotDeploymentProfileAssignment>>(nameof(Assignments)); }
            set { BackingStore?.Set(nameof(Assignments), value); }
        }
        /// <summary>Profile creation time</summary>
        public DateTimeOffset? CreatedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(CreatedDateTime)); }
            set { BackingStore?.Set(nameof(CreatedDateTime), value); }
        }
        /// <summary>Description of the profile</summary>
        public string Description {
            get { return BackingStore?.Get<string>(nameof(Description)); }
            set { BackingStore?.Set(nameof(Description), value); }
        }
        /// <summary>The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.</summary>
        public string DeviceNameTemplate {
            get { return BackingStore?.Get<string>(nameof(DeviceNameTemplate)); }
            set { BackingStore?.Set(nameof(DeviceNameTemplate), value); }
        }
        /// <summary>The AutoPilot device type that this profile is applicable to. Possible values are: windowsPc, surfaceHub2.</summary>
        public WindowsAutopilotDeviceType? DeviceType {
            get { return BackingStore?.Get<WindowsAutopilotDeviceType?>(nameof(DeviceType)); }
            set { BackingStore?.Set(nameof(DeviceType), value); }
        }
        /// <summary>Name of the profile</summary>
        public string DisplayName {
            get { return BackingStore?.Get<string>(nameof(DisplayName)); }
            set { BackingStore?.Set(nameof(DisplayName), value); }
        }
        /// <summary>Enable Autopilot White Glove for the profile.</summary>
        public bool? EnableWhiteGlove {
            get { return BackingStore?.Get<bool?>(nameof(EnableWhiteGlove)); }
            set { BackingStore?.Set(nameof(EnableWhiteGlove), value); }
        }
        /// <summary>Enrollment status screen setting</summary>
        public WindowsEnrollmentStatusScreenSettings EnrollmentStatusScreenSettings {
            get { return BackingStore?.Get<WindowsEnrollmentStatusScreenSettings>(nameof(EnrollmentStatusScreenSettings)); }
            set { BackingStore?.Set(nameof(EnrollmentStatusScreenSettings), value); }
        }
        /// <summary>HardwareHash Extraction for the profile</summary>
        public bool? ExtractHardwareHash {
            get { return BackingStore?.Get<bool?>(nameof(ExtractHardwareHash)); }
            set { BackingStore?.Set(nameof(ExtractHardwareHash), value); }
        }
        /// <summary>Language configured on the device</summary>
        public string Language {
            get { return BackingStore?.Get<string>(nameof(Language)); }
            set { BackingStore?.Set(nameof(Language), value); }
        }
        /// <summary>Profile last modified time</summary>
        public DateTimeOffset? LastModifiedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(LastModifiedDateTime)); }
            set { BackingStore?.Set(nameof(LastModifiedDateTime), value); }
        }
        /// <summary>AzureAD management app ID used during client device-based enrollment discovery</summary>
        public string ManagementServiceAppId {
            get { return BackingStore?.Get<string>(nameof(ManagementServiceAppId)); }
            set { BackingStore?.Set(nameof(ManagementServiceAppId), value); }
        }
        /// <summary>Out of box experience setting</summary>
        public Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings OutOfBoxExperienceSettings {
            get { return BackingStore?.Get<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>(nameof(OutOfBoxExperienceSettings)); }
            set { BackingStore?.Set(nameof(OutOfBoxExperienceSettings), value); }
        }
        /// <summary>Scope tags for the profile.</summary>
        public List<string> RoleScopeTagIds {
            get { return BackingStore?.Get<List<string>>(nameof(RoleScopeTagIds)); }
            set { BackingStore?.Set(nameof(RoleScopeTagIds), value); }
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new WindowsAutopilotDeploymentProfile CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValueNode = parseNode.GetChildNode("@odata.type");
            var mappingValue = mappingValueNode?.GetStringValue();
            return mappingValue switch {
                "#microsoft.graph.windowsAutopilotDeploymentProfile" => new WindowsAutopilotDeploymentProfile(),
                _ => new WindowsAutopilotDeploymentProfile(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"assignedDevices", n => { AssignedDevices = n.GetCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>(WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue).ToList(); } },
                {"assignments", n => { Assignments = n.GetCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>(WindowsAutopilotDeploymentProfileAssignment.CreateFromDiscriminatorValue).ToList(); } },
                {"createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"deviceNameTemplate", n => { DeviceNameTemplate = n.GetStringValue(); } },
                {"deviceType", n => { DeviceType = n.GetEnumValue<WindowsAutopilotDeviceType>(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"enableWhiteGlove", n => { EnableWhiteGlove = n.GetBoolValue(); } },
                {"enrollmentStatusScreenSettings", n => { EnrollmentStatusScreenSettings = n.GetObjectValue<WindowsEnrollmentStatusScreenSettings>(WindowsEnrollmentStatusScreenSettings.CreateFromDiscriminatorValue); } },
                {"extractHardwareHash", n => { ExtractHardwareHash = n.GetBoolValue(); } },
                {"language", n => { Language = n.GetStringValue(); } },
                {"lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"managementServiceAppId", n => { ManagementServiceAppId = n.GetStringValue(); } },
                {"outOfBoxExperienceSettings", n => { OutOfBoxExperienceSettings = n.GetObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>(Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings.CreateFromDiscriminatorValue); } },
                {"roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>().ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>("assignedDevices", AssignedDevices);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>("assignments", Assignments);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("deviceNameTemplate", DeviceNameTemplate);
            writer.WriteEnumValue<WindowsAutopilotDeviceType>("deviceType", DeviceType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enableWhiteGlove", EnableWhiteGlove);
            writer.WriteObjectValue<WindowsEnrollmentStatusScreenSettings>("enrollmentStatusScreenSettings", EnrollmentStatusScreenSettings);
            writer.WriteBoolValue("extractHardwareHash", ExtractHardwareHash);
            writer.WriteStringValue("language", Language);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("managementServiceAppId", ManagementServiceAppId);
            writer.WriteObjectValue<Microsoft.Graph.Beta.Models.OutOfBoxExperienceSettings>("outOfBoxExperienceSettings", OutOfBoxExperienceSettings);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
        }
    }
}
