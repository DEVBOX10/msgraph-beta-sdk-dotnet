// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Beta.Models {
    public class MultiTenantOrganizationMember : DirectoryObject, IParsable {
        /// <summary>The addedByTenantId property</summary>
        public Guid? AddedByTenantId {
            get { return BackingStore?.Get<Guid?>("addedByTenantId"); }
            set { BackingStore?.Set("addedByTenantId", value); }
        }
        /// <summary>The addedDateTime property</summary>
        public DateTimeOffset? AddedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("addedDateTime"); }
            set { BackingStore?.Set("addedDateTime", value); }
        }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName {
            get { return BackingStore?.Get<string?>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#nullable restore
#else
        public string DisplayName {
            get { return BackingStore?.Get<string>("displayName"); }
            set { BackingStore?.Set("displayName", value); }
        }
#endif
        /// <summary>The joinedDateTime property</summary>
        public DateTimeOffset? JoinedDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>("joinedDateTime"); }
            set { BackingStore?.Set("joinedDateTime", value); }
        }
        /// <summary>The role property</summary>
        public MultiTenantOrganizationMemberRole? Role {
            get { return BackingStore?.Get<MultiTenantOrganizationMemberRole?>("role"); }
            set { BackingStore?.Set("role", value); }
        }
        /// <summary>The state property</summary>
        public MultiTenantOrganizationMemberState? State {
            get { return BackingStore?.Get<MultiTenantOrganizationMemberState?>("state"); }
            set { BackingStore?.Set("state", value); }
        }
        /// <summary>The tenantId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId {
            get { return BackingStore?.Get<string?>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#nullable restore
#else
        public string TenantId {
            get { return BackingStore?.Get<string>("tenantId"); }
            set { BackingStore?.Set("tenantId", value); }
        }
#endif
        /// <summary>The transitionDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MultiTenantOrganizationMemberTransitionDetails? TransitionDetails {
            get { return BackingStore?.Get<MultiTenantOrganizationMemberTransitionDetails?>("transitionDetails"); }
            set { BackingStore?.Set("transitionDetails", value); }
        }
#nullable restore
#else
        public MultiTenantOrganizationMemberTransitionDetails TransitionDetails {
            get { return BackingStore?.Get<MultiTenantOrganizationMemberTransitionDetails>("transitionDetails"); }
            set { BackingStore?.Set("transitionDetails", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new multiTenantOrganizationMember and sets the default values.
        /// </summary>
        public MultiTenantOrganizationMember() : base() {
            OdataType = "#microsoft.graph.multiTenantOrganizationMember";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new MultiTenantOrganizationMember CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MultiTenantOrganizationMember();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"addedByTenantId", n => { AddedByTenantId = n.GetGuidValue(); } },
                {"addedDateTime", n => { AddedDateTime = n.GetDateTimeOffsetValue(); } },
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"joinedDateTime", n => { JoinedDateTime = n.GetDateTimeOffsetValue(); } },
                {"role", n => { Role = n.GetEnumValue<MultiTenantOrganizationMemberRole>(); } },
                {"state", n => { State = n.GetEnumValue<MultiTenantOrganizationMemberState>(); } },
                {"tenantId", n => { TenantId = n.GetStringValue(); } },
                {"transitionDetails", n => { TransitionDetails = n.GetObjectValue<MultiTenantOrganizationMemberTransitionDetails>(MultiTenantOrganizationMemberTransitionDetails.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteGuidValue("addedByTenantId", AddedByTenantId);
            writer.WriteDateTimeOffsetValue("addedDateTime", AddedDateTime);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("joinedDateTime", JoinedDateTime);
            writer.WriteEnumValue<MultiTenantOrganizationMemberRole>("role", Role);
            writer.WriteEnumValue<MultiTenantOrganizationMemberState>("state", State);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteObjectValue<MultiTenantOrganizationMemberTransitionDetails>("transitionDetails", TransitionDetails);
        }
    }
}
