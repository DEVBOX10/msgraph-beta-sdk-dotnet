using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Microsoft.Graph.Beta.Models.CallRecords {
    public class MediaStream : IAdditionalDataHolder, IBackedModel, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData {
            get { return BackingStore?.Get<IDictionary<string, object>>(nameof(AdditionalData)); }
            set { BackingStore?.Set(nameof(AdditionalData), value); }
        }
        /// <summary>Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio.</summary>
        public float? AverageAudioDegradation {
            get { return BackingStore?.Get<float?>(nameof(AverageAudioDegradation)); }
            set { BackingStore?.Set(nameof(AverageAudioDegradation), value); }
        }
        /// <summary>Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageAudioNetworkJitter {
            get { return BackingStore?.Get<TimeSpan?>(nameof(AverageAudioNetworkJitter)); }
            set { BackingStore?.Set(nameof(AverageAudioNetworkJitter), value); }
        }
        /// <summary>Average estimated bandwidth available between two endpoints in bits per second.</summary>
        public long? AverageBandwidthEstimate {
            get { return BackingStore?.Get<long?>(nameof(AverageBandwidthEstimate)); }
            set { BackingStore?.Set(nameof(AverageBandwidthEstimate), value); }
        }
        /// <summary>Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageJitter {
            get { return BackingStore?.Get<TimeSpan?>(nameof(AverageJitter)); }
            set { BackingStore?.Set(nameof(AverageJitter), value); }
        }
        /// <summary>Average packet loss rate for stream.</summary>
        public float? AveragePacketLossRate {
            get { return BackingStore?.Get<float?>(nameof(AveragePacketLossRate)); }
            set { BackingStore?.Set(nameof(AveragePacketLossRate), value); }
        }
        /// <summary>Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames.</summary>
        public float? AverageRatioOfConcealedSamples {
            get { return BackingStore?.Get<float?>(nameof(AverageRatioOfConcealedSamples)); }
            set { BackingStore?.Set(nameof(AverageRatioOfConcealedSamples), value); }
        }
        /// <summary>Average frames per second received for all video streams computed over the duration of the session.</summary>
        public float? AverageReceivedFrameRate {
            get { return BackingStore?.Get<float?>(nameof(AverageReceivedFrameRate)); }
            set { BackingStore?.Set(nameof(AverageReceivedFrameRate), value); }
        }
        /// <summary>Average network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? AverageRoundTripTime {
            get { return BackingStore?.Get<TimeSpan?>(nameof(AverageRoundTripTime)); }
            set { BackingStore?.Set(nameof(AverageRoundTripTime), value); }
        }
        /// <summary>Average percentage of video frames lost as displayed to the user.</summary>
        public float? AverageVideoFrameLossPercentage {
            get { return BackingStore?.Get<float?>(nameof(AverageVideoFrameLossPercentage)); }
            set { BackingStore?.Set(nameof(AverageVideoFrameLossPercentage), value); }
        }
        /// <summary>Average frames per second received for a video stream, computed over the duration of the session.</summary>
        public float? AverageVideoFrameRate {
            get { return BackingStore?.Get<float?>(nameof(AverageVideoFrameRate)); }
            set { BackingStore?.Set(nameof(AverageVideoFrameRate), value); }
        }
        /// <summary>Average fraction of packets lost, as specified in [RFC 3550][], computed over the duration of the session.</summary>
        public float? AverageVideoPacketLossRate {
            get { return BackingStore?.Get<float?>(nameof(AverageVideoPacketLossRate)); }
            set { BackingStore?.Set(nameof(AverageVideoPacketLossRate), value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? EndDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(EndDateTime)); }
            set { BackingStore?.Set(nameof(EndDateTime), value); }
        }
        /// <summary>Fraction of the call where frame rate is less than 7.5 frames per second.</summary>
        public float? LowFrameRateRatio {
            get { return BackingStore?.Get<float?>(nameof(LowFrameRateRatio)); }
            set { BackingStore?.Set(nameof(LowFrameRateRatio), value); }
        }
        /// <summary>Fraction of the call that the client is running less than 70% expected video processing capability.</summary>
        public float? LowVideoProcessingCapabilityRatio {
            get { return BackingStore?.Get<float?>(nameof(LowVideoProcessingCapabilityRatio)); }
            set { BackingStore?.Set(nameof(LowVideoProcessingCapabilityRatio), value); }
        }
        /// <summary>Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxAudioNetworkJitter {
            get { return BackingStore?.Get<TimeSpan?>(nameof(MaxAudioNetworkJitter)); }
            set { BackingStore?.Set(nameof(MaxAudioNetworkJitter), value); }
        }
        /// <summary>Maximum jitter for the stream computed as specified in RFC 3550, denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxJitter {
            get { return BackingStore?.Get<TimeSpan?>(nameof(MaxJitter)); }
            set { BackingStore?.Set(nameof(MaxJitter), value); }
        }
        /// <summary>Maximum packet loss rate for the stream.</summary>
        public float? MaxPacketLossRate {
            get { return BackingStore?.Get<float?>(nameof(MaxPacketLossRate)); }
            set { BackingStore?.Set(nameof(MaxPacketLossRate), value); }
        }
        /// <summary>Maximum ratio of packets concealed by the healer.</summary>
        public float? MaxRatioOfConcealedSamples {
            get { return BackingStore?.Get<float?>(nameof(MaxRatioOfConcealedSamples)); }
            set { BackingStore?.Set(nameof(MaxRatioOfConcealedSamples), value); }
        }
        /// <summary>Maximum network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as &apos;PT1S&apos;, where &apos;P&apos; is the duration designator, &apos;T&apos; is the time designator, and &apos;S&apos; is the second designator.</summary>
        public TimeSpan? MaxRoundTripTime {
            get { return BackingStore?.Get<TimeSpan?>(nameof(MaxRoundTripTime)); }
            set { BackingStore?.Set(nameof(MaxRoundTripTime), value); }
        }
        /// <summary>Packet count for the stream.</summary>
        public long? PacketUtilization {
            get { return BackingStore?.Get<long?>(nameof(PacketUtilization)); }
            set { BackingStore?.Set(nameof(PacketUtilization), value); }
        }
        /// <summary>Packet loss rate after FEC has been applied aggregated across all video streams and codecs.</summary>
        public float? PostForwardErrorCorrectionPacketLossRate {
            get { return BackingStore?.Get<float?>(nameof(PostForwardErrorCorrectionPacketLossRate)); }
            set { BackingStore?.Set(nameof(PostForwardErrorCorrectionPacketLossRate), value); }
        }
        /// <summary>UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? StartDateTime {
            get { return BackingStore?.Get<DateTimeOffset?>(nameof(StartDateTime)); }
            set { BackingStore?.Set(nameof(StartDateTime), value); }
        }
        /// <summary>Indicates the direction of the media stream. Possible values are: callerToCallee, calleeToCaller.</summary>
        public MediaStreamDirection? StreamDirection {
            get { return BackingStore?.Get<MediaStreamDirection?>(nameof(StreamDirection)); }
            set { BackingStore?.Set(nameof(StreamDirection), value); }
        }
        /// <summary>Unique identifier for the stream.</summary>
        public string StreamId {
            get { return BackingStore?.Get<string>(nameof(StreamId)); }
            set { BackingStore?.Set(nameof(StreamId), value); }
        }
        /// <summary>True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise.</summary>
        public bool? WasMediaBypassed {
            get { return BackingStore?.Get<bool?>(nameof(WasMediaBypassed)); }
            set { BackingStore?.Set(nameof(WasMediaBypassed), value); }
        }
        /// <summary>
        /// Instantiates a new mediaStream and sets the default values.
        /// </summary>
        public MediaStream() {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static MediaStream CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MediaStream();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"averageAudioDegradation", n => { AverageAudioDegradation = n.GetFloatValue(); } },
                {"averageAudioNetworkJitter", n => { AverageAudioNetworkJitter = n.GetTimeSpanValue(); } },
                {"averageBandwidthEstimate", n => { AverageBandwidthEstimate = n.GetLongValue(); } },
                {"averageJitter", n => { AverageJitter = n.GetTimeSpanValue(); } },
                {"averagePacketLossRate", n => { AveragePacketLossRate = n.GetFloatValue(); } },
                {"averageRatioOfConcealedSamples", n => { AverageRatioOfConcealedSamples = n.GetFloatValue(); } },
                {"averageReceivedFrameRate", n => { AverageReceivedFrameRate = n.GetFloatValue(); } },
                {"averageRoundTripTime", n => { AverageRoundTripTime = n.GetTimeSpanValue(); } },
                {"averageVideoFrameLossPercentage", n => { AverageVideoFrameLossPercentage = n.GetFloatValue(); } },
                {"averageVideoFrameRate", n => { AverageVideoFrameRate = n.GetFloatValue(); } },
                {"averageVideoPacketLossRate", n => { AverageVideoPacketLossRate = n.GetFloatValue(); } },
                {"endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                {"lowFrameRateRatio", n => { LowFrameRateRatio = n.GetFloatValue(); } },
                {"lowVideoProcessingCapabilityRatio", n => { LowVideoProcessingCapabilityRatio = n.GetFloatValue(); } },
                {"maxAudioNetworkJitter", n => { MaxAudioNetworkJitter = n.GetTimeSpanValue(); } },
                {"maxJitter", n => { MaxJitter = n.GetTimeSpanValue(); } },
                {"maxPacketLossRate", n => { MaxPacketLossRate = n.GetFloatValue(); } },
                {"maxRatioOfConcealedSamples", n => { MaxRatioOfConcealedSamples = n.GetFloatValue(); } },
                {"maxRoundTripTime", n => { MaxRoundTripTime = n.GetTimeSpanValue(); } },
                {"packetUtilization", n => { PacketUtilization = n.GetLongValue(); } },
                {"postForwardErrorCorrectionPacketLossRate", n => { PostForwardErrorCorrectionPacketLossRate = n.GetFloatValue(); } },
                {"startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                {"streamDirection", n => { StreamDirection = n.GetEnumValue<MediaStreamDirection>(); } },
                {"streamId", n => { StreamId = n.GetStringValue(); } },
                {"wasMediaBypassed", n => { WasMediaBypassed = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("averageAudioDegradation", AverageAudioDegradation);
            writer.WriteTimeSpanValue("averageAudioNetworkJitter", AverageAudioNetworkJitter);
            writer.WriteLongValue("averageBandwidthEstimate", AverageBandwidthEstimate);
            writer.WriteTimeSpanValue("averageJitter", AverageJitter);
            writer.WriteFloatValue("averagePacketLossRate", AveragePacketLossRate);
            writer.WriteFloatValue("averageRatioOfConcealedSamples", AverageRatioOfConcealedSamples);
            writer.WriteFloatValue("averageReceivedFrameRate", AverageReceivedFrameRate);
            writer.WriteTimeSpanValue("averageRoundTripTime", AverageRoundTripTime);
            writer.WriteFloatValue("averageVideoFrameLossPercentage", AverageVideoFrameLossPercentage);
            writer.WriteFloatValue("averageVideoFrameRate", AverageVideoFrameRate);
            writer.WriteFloatValue("averageVideoPacketLossRate", AverageVideoPacketLossRate);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteFloatValue("lowFrameRateRatio", LowFrameRateRatio);
            writer.WriteFloatValue("lowVideoProcessingCapabilityRatio", LowVideoProcessingCapabilityRatio);
            writer.WriteTimeSpanValue("maxAudioNetworkJitter", MaxAudioNetworkJitter);
            writer.WriteTimeSpanValue("maxJitter", MaxJitter);
            writer.WriteFloatValue("maxPacketLossRate", MaxPacketLossRate);
            writer.WriteFloatValue("maxRatioOfConcealedSamples", MaxRatioOfConcealedSamples);
            writer.WriteTimeSpanValue("maxRoundTripTime", MaxRoundTripTime);
            writer.WriteLongValue("packetUtilization", PacketUtilization);
            writer.WriteFloatValue("postForwardErrorCorrectionPacketLossRate", PostForwardErrorCorrectionPacketLossRate);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteEnumValue<MediaStreamDirection>("streamDirection", StreamDirection);
            writer.WriteStringValue("streamId", StreamId);
            writer.WriteBoolValue("wasMediaBypassed", WasMediaBypassed);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
