using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace MicrosoftGraphSdk.Models.Microsoft.Graph {
    public class WindowsMalwareInformation : Entity, IParsable {
        /// <summary>Information URL to learn more about the malware</summary>
        public string AdditionalInformationUrl { get; set; }
        /// <summary>Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.</summary>
        public WindowsMalwareCategory? Category { get; set; }
        /// <summary>List of devices affected by current malware with the malware state on each device</summary>
        public List<MalwareStateForWindowsDevice> DeviceMalwareStates { get; set; }
        /// <summary>Malware name</summary>
        public string DisplayName { get; set; }
        /// <summary>The last time the malware is detected</summary>
        public DateTimeOffset? LastDetectionDateTime { get; set; }
        /// <summary>Severity of the malware. Possible values are: unknown, low, moderate, high, severe.</summary>
        public WindowsMalwareSeverity? Severity { get; set; }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<T, IParseNode>> GetFieldDeserializers<T>() {
            return new Dictionary<string, Action<T, IParseNode>>(base.GetFieldDeserializers<T>()) {
                {"additionalInformationUrl", (o,n) => { (o as WindowsMalwareInformation).AdditionalInformationUrl = n.GetStringValue(); } },
                {"category", (o,n) => { (o as WindowsMalwareInformation).Category = n.GetEnumValue<WindowsMalwareCategory>(); } },
                {"deviceMalwareStates", (o,n) => { (o as WindowsMalwareInformation).DeviceMalwareStates = n.GetCollectionOfObjectValues<MalwareStateForWindowsDevice>().ToList(); } },
                {"displayName", (o,n) => { (o as WindowsMalwareInformation).DisplayName = n.GetStringValue(); } },
                {"lastDetectionDateTime", (o,n) => { (o as WindowsMalwareInformation).LastDetectionDateTime = n.GetDateTimeOffsetValue(); } },
                {"severity", (o,n) => { (o as WindowsMalwareInformation).Severity = n.GetEnumValue<WindowsMalwareSeverity>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("additionalInformationUrl", AdditionalInformationUrl);
            writer.WriteEnumValue<WindowsMalwareCategory>("category", Category);
            writer.WriteCollectionOfObjectValues<MalwareStateForWindowsDevice>("deviceMalwareStates", DeviceMalwareStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("lastDetectionDateTime", LastDetectionDateTime);
            writer.WriteEnumValue<WindowsMalwareSeverity>("severity", Severity);
        }
    }
}
