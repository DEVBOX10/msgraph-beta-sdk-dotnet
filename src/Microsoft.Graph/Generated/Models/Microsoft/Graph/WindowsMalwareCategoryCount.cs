using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace MicrosoftGraphSdk.Models.Microsoft.Graph {
    /// <summary>Provides operations to manage the deviceManagement singleton.</summary>
    public class WindowsMalwareCategoryCount : IAdditionalDataHolder, IParsable {
        /// <summary>Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647</summary>
        public int? ActiveMalwareDetectionCount { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Malware category. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remote_Control_Software, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.</summary>
        public WindowsMalwareCategory? Category { get; set; }
        /// <summary>Count of devices with malware detections for this malware category</summary>
        public int? DeviceCount { get; set; }
        /// <summary>Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647</summary>
        public int? DistinctActiveMalwareCount { get; set; }
        /// <summary>The Timestamp of the last update for the device count in UTC</summary>
        public DateTimeOffset? LastUpdateDateTime { get; set; }
        /// <summary>
        /// Instantiates a new windowsMalwareCategoryCount and sets the default values.
        /// </summary>
        public WindowsMalwareCategoryCount() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static WindowsMalwareCategoryCount CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsMalwareCategoryCount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<T, IParseNode>> GetFieldDeserializers<T>() {
            return new Dictionary<string, Action<T, IParseNode>> {
                {"activeMalwareDetectionCount", (o,n) => { (o as WindowsMalwareCategoryCount).ActiveMalwareDetectionCount = n.GetIntValue(); } },
                {"category", (o,n) => { (o as WindowsMalwareCategoryCount).Category = n.GetEnumValue<WindowsMalwareCategory>(); } },
                {"deviceCount", (o,n) => { (o as WindowsMalwareCategoryCount).DeviceCount = n.GetIntValue(); } },
                {"distinctActiveMalwareCount", (o,n) => { (o as WindowsMalwareCategoryCount).DistinctActiveMalwareCount = n.GetIntValue(); } },
                {"lastUpdateDateTime", (o,n) => { (o as WindowsMalwareCategoryCount).LastUpdateDateTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("activeMalwareDetectionCount", ActiveMalwareDetectionCount);
            writer.WriteEnumValue<WindowsMalwareCategory>("category", Category);
            writer.WriteIntValue("deviceCount", DeviceCount);
            writer.WriteIntValue("distinctActiveMalwareCount", DistinctActiveMalwareCount);
            writer.WriteDateTimeOffsetValue("lastUpdateDateTime", LastUpdateDateTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
