using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace MicrosoftGraph.Models.Microsoft.Graph {
    public class WindowsMalwareOverview : IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Count of devices per malware category</summary>
        public List<WindowsMalwareCategoryCount> MalwareCategorySummary { get; set; }
        /// <summary>Count of devices with malware detected in the last 30 days</summary>
        public int? MalwareDetectedDeviceCount { get; set; }
        /// <summary>Count of devices per malware execution state</summary>
        public List<WindowsMalwareExecutionStateCount> MalwareExecutionStateSummary { get; set; }
        /// <summary>Count of devices per malware</summary>
        public List<WindowsMalwareNameCount> MalwareNameSummary { get; set; }
        /// <summary>Count of active malware per malware severity</summary>
        public List<WindowsMalwareSeverityCount> MalwareSeveritySummary { get; set; }
        /// <summary>Count of devices per malware state</summary>
        public List<WindowsMalwareStateCount> MalwareStateSummary { get; set; }
        /// <summary>Count of devices with malware per windows OS version</summary>
        public List<OsVersionCount> OsVersionsSummary { get; set; }
        /// <summary>Count of all distinct malwares detected across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalDistinctMalwareCount { get; set; }
        /// <summary>Count of all malware detections across all devices. Valid values -2147483648 to 2147483647</summary>
        public int? TotalMalwareCount { get; set; }
        /// <summary>
        /// Instantiates a new windowsMalwareOverview and sets the default values.
        /// </summary>
        public WindowsMalwareOverview() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<T, IParseNode>> GetFieldDeserializers<T>() {
            return new Dictionary<string, Action<T, IParseNode>> {
                {"malwareCategorySummary", (o,n) => { (o as WindowsMalwareOverview).MalwareCategorySummary = n.GetCollectionOfObjectValues<WindowsMalwareCategoryCount>().ToList(); } },
                {"malwareDetectedDeviceCount", (o,n) => { (o as WindowsMalwareOverview).MalwareDetectedDeviceCount = n.GetIntValue(); } },
                {"malwareExecutionStateSummary", (o,n) => { (o as WindowsMalwareOverview).MalwareExecutionStateSummary = n.GetCollectionOfObjectValues<WindowsMalwareExecutionStateCount>().ToList(); } },
                {"malwareNameSummary", (o,n) => { (o as WindowsMalwareOverview).MalwareNameSummary = n.GetCollectionOfObjectValues<WindowsMalwareNameCount>().ToList(); } },
                {"malwareSeveritySummary", (o,n) => { (o as WindowsMalwareOverview).MalwareSeveritySummary = n.GetCollectionOfObjectValues<WindowsMalwareSeverityCount>().ToList(); } },
                {"malwareStateSummary", (o,n) => { (o as WindowsMalwareOverview).MalwareStateSummary = n.GetCollectionOfObjectValues<WindowsMalwareStateCount>().ToList(); } },
                {"osVersionsSummary", (o,n) => { (o as WindowsMalwareOverview).OsVersionsSummary = n.GetCollectionOfObjectValues<OsVersionCount>().ToList(); } },
                {"totalDistinctMalwareCount", (o,n) => { (o as WindowsMalwareOverview).TotalDistinctMalwareCount = n.GetIntValue(); } },
                {"totalMalwareCount", (o,n) => { (o as WindowsMalwareOverview).TotalMalwareCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<WindowsMalwareCategoryCount>("malwareCategorySummary", MalwareCategorySummary);
            writer.WriteIntValue("malwareDetectedDeviceCount", MalwareDetectedDeviceCount);
            writer.WriteCollectionOfObjectValues<WindowsMalwareExecutionStateCount>("malwareExecutionStateSummary", MalwareExecutionStateSummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareNameCount>("malwareNameSummary", MalwareNameSummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareSeverityCount>("malwareSeveritySummary", MalwareSeveritySummary);
            writer.WriteCollectionOfObjectValues<WindowsMalwareStateCount>("malwareStateSummary", MalwareStateSummary);
            writer.WriteCollectionOfObjectValues<OsVersionCount>("osVersionsSummary", OsVersionsSummary);
            writer.WriteIntValue("totalDistinctMalwareCount", TotalDistinctMalwareCount);
            writer.WriteIntValue("totalMalwareCount", TotalMalwareCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
