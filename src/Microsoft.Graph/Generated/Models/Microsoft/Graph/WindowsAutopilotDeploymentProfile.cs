using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace MicrosoftGraphSdk.Models.Microsoft.Graph {
    /// <summary>Provides operations to manage the deviceManagement singleton.</summary>
    public class WindowsAutopilotDeploymentProfile : Entity, IParsable {
        /// <summary>The list of assigned devices for the profile.</summary>
        public List<WindowsAutopilotDeviceIdentity> AssignedDevices { get; set; }
        /// <summary>The list of group assignments for the profile.</summary>
        public List<WindowsAutopilotDeploymentProfileAssignment> Assignments { get; set; }
        /// <summary>Profile creation time</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Description of the profile</summary>
        public string Description { get; set; }
        /// <summary>The template used to name the AutoPilot Device. This can be a custom text and can also contain either the serial number of the device, or a randomly generated number. The total length of the text generated by the template can be no more than 15 characters.</summary>
        public string DeviceNameTemplate { get; set; }
        /// <summary>The AutoPilot device type that this profile is applicable to. Possible values are: windowsPc, surfaceHub2.</summary>
        public WindowsAutopilotDeviceType? DeviceType { get; set; }
        /// <summary>Name of the profile</summary>
        public string DisplayName { get; set; }
        /// <summary>Enable Autopilot White Glove for the profile.</summary>
        public bool? EnableWhiteGlove { get; set; }
        /// <summary>Enrollment status screen setting</summary>
        public WindowsEnrollmentStatusScreenSettings EnrollmentStatusScreenSettings { get; set; }
        /// <summary>HardwareHash Extraction for the profile</summary>
        public bool? ExtractHardwareHash { get; set; }
        /// <summary>Language configured on the device</summary>
        public string Language { get; set; }
        /// <summary>Profile last modified time</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>AzureAD management app ID used during client device-based enrollment discovery</summary>
        public string ManagementServiceAppId { get; set; }
        /// <summary>Out of box experience setting</summary>
        public MicrosoftGraphSdk.Models.Microsoft.Graph.OutOfBoxExperienceSettings OutOfBoxExperienceSettings { get; set; }
        /// <summary>Scope tags for the profile.</summary>
        public List<string> RoleScopeTagIds { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// </summary>
        public static new WindowsAutopilotDeploymentProfile CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WindowsAutopilotDeploymentProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<T, IParseNode>> GetFieldDeserializers<T>() {
            return new Dictionary<string, Action<T, IParseNode>>(base.GetFieldDeserializers<T>()) {
                {"assignedDevices", (o,n) => { (o as WindowsAutopilotDeploymentProfile).AssignedDevices = n.GetCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>(WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue).ToList(); } },
                {"assignments", (o,n) => { (o as WindowsAutopilotDeploymentProfile).Assignments = n.GetCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>(WindowsAutopilotDeploymentProfileAssignment.CreateFromDiscriminatorValue).ToList(); } },
                {"createdDateTime", (o,n) => { (o as WindowsAutopilotDeploymentProfile).CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                {"description", (o,n) => { (o as WindowsAutopilotDeploymentProfile).Description = n.GetStringValue(); } },
                {"deviceNameTemplate", (o,n) => { (o as WindowsAutopilotDeploymentProfile).DeviceNameTemplate = n.GetStringValue(); } },
                {"deviceType", (o,n) => { (o as WindowsAutopilotDeploymentProfile).DeviceType = n.GetEnumValue<WindowsAutopilotDeviceType>(); } },
                {"displayName", (o,n) => { (o as WindowsAutopilotDeploymentProfile).DisplayName = n.GetStringValue(); } },
                {"enableWhiteGlove", (o,n) => { (o as WindowsAutopilotDeploymentProfile).EnableWhiteGlove = n.GetBoolValue(); } },
                {"enrollmentStatusScreenSettings", (o,n) => { (o as WindowsAutopilotDeploymentProfile).EnrollmentStatusScreenSettings = n.GetObjectValue<WindowsEnrollmentStatusScreenSettings>(WindowsEnrollmentStatusScreenSettings.CreateFromDiscriminatorValue); } },
                {"extractHardwareHash", (o,n) => { (o as WindowsAutopilotDeploymentProfile).ExtractHardwareHash = n.GetBoolValue(); } },
                {"language", (o,n) => { (o as WindowsAutopilotDeploymentProfile).Language = n.GetStringValue(); } },
                {"lastModifiedDateTime", (o,n) => { (o as WindowsAutopilotDeploymentProfile).LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                {"managementServiceAppId", (o,n) => { (o as WindowsAutopilotDeploymentProfile).ManagementServiceAppId = n.GetStringValue(); } },
                {"outOfBoxExperienceSettings", (o,n) => { (o as WindowsAutopilotDeploymentProfile).OutOfBoxExperienceSettings = n.GetObjectValue<MicrosoftGraphSdk.Models.Microsoft.Graph.OutOfBoxExperienceSettings>(MicrosoftGraphSdk.Models.Microsoft.Graph.OutOfBoxExperienceSettings.CreateFromDiscriminatorValue); } },
                {"roleScopeTagIds", (o,n) => { (o as WindowsAutopilotDeploymentProfile).RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>().ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        /// </summary>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>("assignedDevices", AssignedDevices);
            writer.WriteCollectionOfObjectValues<WindowsAutopilotDeploymentProfileAssignment>("assignments", Assignments);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("deviceNameTemplate", DeviceNameTemplate);
            writer.WriteEnumValue<WindowsAutopilotDeviceType>("deviceType", DeviceType);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enableWhiteGlove", EnableWhiteGlove);
            writer.WriteObjectValue<WindowsEnrollmentStatusScreenSettings>("enrollmentStatusScreenSettings", EnrollmentStatusScreenSettings);
            writer.WriteBoolValue("extractHardwareHash", ExtractHardwareHash);
            writer.WriteStringValue("language", Language);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("managementServiceAppId", ManagementServiceAppId);
            writer.WriteObjectValue<MicrosoftGraphSdk.Models.Microsoft.Graph.OutOfBoxExperienceSettings>("outOfBoxExperienceSettings", OutOfBoxExperienceSettings);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
        }
    }
}
